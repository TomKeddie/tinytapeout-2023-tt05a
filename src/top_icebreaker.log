
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+22 (git sha1 53c0a6b78, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `top_icebreaker.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top_icebreaker.v
Parsing Verilog input from `top_icebreaker.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Parsing `vga.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: vga.v
Parsing Verilog input from `vga.v' to AST representation.
Storing AST representation for module `$abstract\vga'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json top_icebreaker.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\vga'.
Generating RTLIL representation for module `\vga'.

3.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga

3.3.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga
Removing unused module `$abstract\vga'.
Removing unused module `$abstract\top'.
Removed 2 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 14 switch rules as full_case in process $proc$vga.v:240$476 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:219$463 in module vga.
Marked 2 switch rules as full_case in process $proc$vga.v:177$454 in module vga.
Marked 4 switch rules as full_case in process $proc$vga.v:153$445 in module vga.
Marked 5 switch rules as full_case in process $proc$vga.v:127$436 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:103$395 in module vga.
Marked 1 switch rules as full_case in process $proc$top_icebreaker.v:69$384 in module top.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 23 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top_icebreaker.v:29$391'.
  Set init value: \rst_counter = 10'1111111111

3.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~62 debug messages>

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\vga.$proc$vga.v:240$476'.
     1/7: $0\score_r[2:0]
     2/7: $0\score_l[2:0]
     3/7: $0\ball_ratio[2:0]
     4/7: $0\ball_motion_d[0:0]
     5/7: $0\ball_motion_l[0:0]
     6/7: $0\ball_pos_v[8:0]
     7/7: $0\ball_pos_h[9:0]
Creating decoders for process `\vga.$proc$vga.v:219$463'.
     1/2: $0\paddle_r_pos_v[8:0]
     2/2: $0\paddle_l_pos_v[8:0]
Creating decoders for process `\vga.$proc$vga.v:190$457'.
     1/8: $0\right_down_pressed[0:0]
     2/8: $0\right_up_pressed[0:0]
     3/8: $0\left_down_pressed[0:0]
     4/8: $0\left_up_pressed[0:0]
     5/8: $0\right_down_1d[0:0]
     6/8: $0\right_up_1d[0:0]
     7/8: $0\left_down_1d[0:0]
     8/8: $0\left_up_1d[0:0]
Creating decoders for process `\vga.$proc$vga.v:177$454'.
     1/1: $0\interval_counter[24:0]
Creating decoders for process `\vga.$proc$vga.v:153$445'.
     1/3: $0\vs_out[0:0]
     2/3: $0\count_v[8:0]
     3/3: $0\blank_v[0:0]
Creating decoders for process `\vga.$proc$vga.v:127$436'.
     1/3: $0\count_h[9:0]
     2/3: $0\hs_out[0:0]
     3/3: $0\blank_h[0:0]
Creating decoders for process `\vga.$proc$vga.v:103$395'.
     1/2: $0\grn[0:0]
     2/2: $0\red[0:0]
Creating decoders for process `\top.$proc$top_icebreaker.v:29$391'.
Creating decoders for process `\top.$proc$top_icebreaker.v:69$384'.
     1/2: $0\rst[0:0]
     2/2: $0\rst_counter[9:0]

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$887' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$888' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$889' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$890' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$891' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$892' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$893' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$894' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$895' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$896' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$897' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$899' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$901' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$902' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$903' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$904' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$905' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$906' with positive edge clock.
Creating register for signal `\vga.\ball_pos_h' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$907' with positive edge clock.
Creating register for signal `\vga.\ball_pos_v' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$908' with positive edge clock.
Creating register for signal `\vga.\ball_motion_l' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$909' with positive edge clock.
Creating register for signal `\vga.\ball_motion_d' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$910' with positive edge clock.
Creating register for signal `\vga.\ball_ratio' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\vga.\score_l' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\vga.\score_r' using process `\vga.$proc$vga.v:240$476'.
  created $dff cell `$procdff$913' with positive edge clock.
Creating register for signal `\vga.\paddle_l_pos_v' using process `\vga.$proc$vga.v:219$463'.
  created $dff cell `$procdff$914' with positive edge clock.
Creating register for signal `\vga.\paddle_r_pos_v' using process `\vga.$proc$vga.v:219$463'.
  created $dff cell `$procdff$915' with positive edge clock.
Creating register for signal `\vga.\left_up_1d' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$916' with positive edge clock.
Creating register for signal `\vga.\left_down_1d' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$917' with positive edge clock.
Creating register for signal `\vga.\right_up_1d' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$918' with positive edge clock.
Creating register for signal `\vga.\right_down_1d' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$919' with positive edge clock.
Creating register for signal `\vga.\left_up_pressed' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$920' with positive edge clock.
Creating register for signal `\vga.\left_down_pressed' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$921' with positive edge clock.
Creating register for signal `\vga.\right_up_pressed' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$922' with positive edge clock.
Creating register for signal `\vga.\right_down_pressed' using process `\vga.$proc$vga.v:190$457'.
  created $dff cell `$procdff$923' with positive edge clock.
Creating register for signal `\vga.\interval_counter' using process `\vga.$proc$vga.v:177$454'.
  created $dff cell `$procdff$924' with positive edge clock.
Creating register for signal `\vga.\blank_v' using process `\vga.$proc$vga.v:153$445'.
  created $dff cell `$procdff$925' with positive edge clock.
Creating register for signal `\vga.\count_v' using process `\vga.$proc$vga.v:153$445'.
  created $dff cell `$procdff$926' with positive edge clock.
Creating register for signal `\vga.\vs_out' using process `\vga.$proc$vga.v:153$445'.
  created $dff cell `$procdff$927' with positive edge clock.
Creating register for signal `\vga.\blank_h' using process `\vga.$proc$vga.v:127$436'.
  created $dff cell `$procdff$928' with positive edge clock.
Creating register for signal `\vga.\count_h' using process `\vga.$proc$vga.v:127$436'.
  created $dff cell `$procdff$929' with positive edge clock.
Creating register for signal `\vga.\hs_out' using process `\vga.$proc$vga.v:127$436'.
  created $dff cell `$procdff$930' with positive edge clock.
Creating register for signal `\vga.\red' using process `\vga.$proc$vga.v:103$395'.
  created $dff cell `$procdff$931' with positive edge clock.
Creating register for signal `\vga.\grn' using process `\vga.$proc$vga.v:103$395'.
  created $dff cell `$procdff$932' with positive edge clock.
Creating register for signal `\top.\rst_counter' using process `\top.$proc$top_icebreaker.v:69$384'.
  created $dff cell `$procdff$933' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top_icebreaker.v:69$384'.
  created $dff cell `$procdff$934' with positive edge clock.

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 19 empty switches in `\vga.$proc$vga.v:240$476'.
Removing empty process `vga.$proc$vga.v:240$476'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:219$463'.
Removing empty process `vga.$proc$vga.v:219$463'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:190$457'.
Removing empty process `vga.$proc$vga.v:190$457'.
Found and cleaned up 2 empty switches in `\vga.$proc$vga.v:177$454'.
Removing empty process `vga.$proc$vga.v:177$454'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:153$445'.
Removing empty process `vga.$proc$vga.v:153$445'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:127$436'.
Removing empty process `vga.$proc$vga.v:127$436'.
Found and cleaned up 1 empty switch in `\vga.$proc$vga.v:103$395'.
Removing empty process `vga.$proc$vga.v:103$395'.
Removing empty process `top.$proc$top_icebreaker.v:29$391'.
Found and cleaned up 2 empty switches in `\top.$proc$top_icebreaker.v:69$384'.
Removing empty process `top.$proc$top_icebreaker.v:69$384'.
Cleaned up 62 empty switches.

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga.
<suppressed ~10 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module vga.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 167 unused wires.
<suppressed ~1 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\vga.$procmux$637: \vga.ball_motion_d -> 1'1
      Replacing known input bits on port B of cell $flatten\vga.$procmux$633: \vga.ball_motion_d -> 1'0
      Replacing known input bits on port B of cell $flatten\vga.$procmux$619: \vga.ball_motion_d -> 1'1
      Replacing known input bits on port B of cell $flatten\vga.$procmux$615: \vga.ball_motion_d -> 1'0
      Replacing known input bits on port A of cell $flatten\vga.$procmux$666: \vga.ball_motion_l -> 1'1
      Replacing known input bits on port A of cell $flatten\vga.$procmux$664: \vga.ball_motion_l -> 1'1
      Replacing known input bits on port A of cell $flatten\vga.$procmux$659: \vga.ball_motion_l -> 1'0
      Replacing known input bits on port A of cell $flatten\vga.$procmux$657: \vga.ball_motion_l -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$933 ($dff) from module top (D = $sub$top_icebreaker.v:73$386_Y [9:0], Q = \rst_counter).
Adding SRST signal on $flatten\vga.$procdff$931 ($dff) from module top (D = $flatten\vga.$ternary$vga.v:117$434_Y, Q = \vga.red, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$930 ($dff) from module top (D = $flatten\vga.$procmux$847_Y, Q = \vga.hs_out, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$929 ($dff) from module top (D = $flatten\vga.$procmux$841_Y, Q = \vga.count_h, rval = 10'1111111111).
Adding SRST signal on $flatten\vga.$procdff$928 ($dff) from module top (D = $flatten\vga.$procmux$868_Y, Q = \vga.blank_h, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$945 ($sdff) from module top (D = $flatten\vga.$procmux$865_Y, Q = \vga.blank_h).
Adding SRST signal on $flatten\vga.$procdff$927 ($dff) from module top (D = $flatten\vga.$procmux$804_Y, Q = \vga.vs_out, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$955 ($sdff) from module top (D = $flatten\vga.$procmux$797_Y, Q = \vga.vs_out).
Adding SRST signal on $flatten\vga.$procdff$926 ($dff) from module top (D = $flatten\vga.$procmux$815_Y, Q = \vga.count_v, rval = 9'111111111).
Adding EN signal on $auto$ff.cc:266:slice$961 ($sdff) from module top (D = $flatten\vga.$procmux$813_Y, Q = \vga.count_v).
Adding SRST signal on $flatten\vga.$procdff$925 ($dff) from module top (D = $flatten\vga.$procmux$826_Y, Q = \vga.blank_v, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$963 ($sdff) from module top (D = $flatten\vga.$procmux$821_Y, Q = \vga.blank_v).
Adding SRST signal on $flatten\vga.$procdff$924 ($dff) from module top (D = $flatten\vga.$add$vga.v:182$456_Y [24:0], Q = \vga.interval_counter, rval = 25'0000000000000000000000000).
Adding SRST signal on $flatten\vga.$procdff$923 ($dff) from module top (D = $flatten\vga.$procmux$765_Y, Q = \vga.right_down_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$922 ($dff) from module top (D = $flatten\vga.$procmux$769_Y, Q = \vga.right_up_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$921 ($dff) from module top (D = $flatten\vga.$procmux$773_Y, Q = \vga.left_down_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$920 ($dff) from module top (D = $flatten\vga.$procmux$777_Y, Q = \vga.left_up_pressed, rval = 1'0).
Adding EN signal on $flatten\vga.$procdff$919 ($dff) from module top (D = \vga.right_down, Q = \vga.right_down_1d).
Adding EN signal on $flatten\vga.$procdff$918 ($dff) from module top (D = \vga.right_up, Q = \vga.right_up_1d).
Adding EN signal on $flatten\vga.$procdff$917 ($dff) from module top (D = \vga.left_down, Q = \vga.left_down_1d).
Adding EN signal on $flatten\vga.$procdff$916 ($dff) from module top (D = \vga.left_up, Q = \vga.left_up_1d).
Adding SRST signal on $flatten\vga.$procdff$915 ($dff) from module top (D = $flatten\vga.$procmux$753_Y, Q = \vga.paddle_r_pos_v, rval = 9'011110000).
Adding EN signal on $auto$ff.cc:266:slice$982 ($sdff) from module top (D = $flatten\vga.$procmux$753_Y, Q = \vga.paddle_r_pos_v).
Adding SRST signal on $flatten\vga.$procdff$914 ($dff) from module top (D = $flatten\vga.$procmux$760_Y, Q = \vga.paddle_l_pos_v, rval = 9'011110000).
Adding EN signal on $auto$ff.cc:266:slice$986 ($sdff) from module top (D = $flatten\vga.$procmux$760_Y, Q = \vga.paddle_l_pos_v).
Adding SRST signal on $flatten\vga.$procdff$913 ($dff) from module top (D = $flatten\vga.$procmux$568_Y, Q = \vga.score_r, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$990 ($sdff) from module top (D = $flatten\vga.$add$vga.v:263$486_Y [2:0], Q = \vga.score_r).
Adding SRST signal on $flatten\vga.$procdff$912 ($dff) from module top (D = $flatten\vga.$procmux$584_Y, Q = \vga.score_l, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$996 ($sdff) from module top (D = $flatten\vga.$add$vga.v:305$503_Y [2:0], Q = \vga.score_l).
Adding SRST signal on $flatten\vga.$procdff$911 ($dff) from module top (D = $flatten\vga.$procmux$608_Y, Q = \vga.ball_ratio, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1004 ($sdff) from module top (D = $flatten\vga.$procmux$606_Y, Q = \vga.ball_ratio).
Adding SRST signal on $flatten\vga.$procdff$910 ($dff) from module top (D = $flatten\vga.$procmux$650_Y, Q = \vga.ball_motion_d, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1012 ($sdff) from module top (D = $flatten\vga.$procmux$648_Y, Q = \vga.ball_motion_d).
Adding SRST signal on $flatten\vga.$procdff$909 ($dff) from module top (D = $flatten\vga.$procmux$670_Y, Q = \vga.ball_motion_l, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1020 ($sdff) from module top (D = $flatten\vga.$procmux$668_Y, Q = \vga.ball_motion_l).
Adding SRST signal on $flatten\vga.$procdff$908 ($dff) from module top (D = $flatten\vga.$procmux$722_Y, Q = \vga.ball_pos_v, rval = 9'011110000).
Adding EN signal on $auto$ff.cc:266:slice$1022 ($sdff) from module top (D = $flatten\vga.$procmux$720_Y, Q = \vga.ball_pos_v).
Adding SRST signal on $flatten\vga.$procdff$907 ($dff) from module top (D = $flatten\vga.$procmux$746_Y, Q = \vga.ball_pos_h, rval = 10'1001110000).
Adding EN signal on $auto$ff.cc:266:slice$1034 ($sdff) from module top (D = $flatten\vga.$procmux$744_Y, Q = \vga.ball_pos_h).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 53 unused cells and 53 unused wires.
<suppressed ~55 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$sub$top_icebreaker.v:73$386 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$sub$top_icebreaker.v:73$386 ($sub).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$948 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$950 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1007 ($ne).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:309$504 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:309$504 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:305$503 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:305$503 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:290$495 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:290$495 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:282$494 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:282$494 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:274$492 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:274$492 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:272$491 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:267$487 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:267$487 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:263$486 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:263$486 ($add).
Removed top 1 bits (of 4) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1025 ($ne).
Removed top 6 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:254$479 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:234$475 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:234$475 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:233$473 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:231$472 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:231$472 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:230$470 ($gt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:228$469 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:228$469 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:227$467 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:225$466 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:225$466 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:224$464 ($gt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:182$456 ($add).
Removed top 7 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:182$456 ($add).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:181$455 ($ne).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:164$452 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:164$451 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:161$449 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:160$448 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:160$448 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:159$447 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:158$446 ($ge).
Removed top 1 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1027 ($ne).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:143$443 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:139$441 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:135$439 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:134$438 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:134$438 ($add).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:132$437 ($lt).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:123$428 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:123$428 ($add).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:123$425 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:123$425 ($sub).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:123$422 ($add).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:123$422 ($add).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:123$420 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:123$420 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:121$417 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:121$417 ($add).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:121$414 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:121$414 ($sub).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$le$vga.v:121$412 ($le).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:121$411 ($gt).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:119$408 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:119$408 ($add).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:119$405 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:119$405 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$le$vga.v:119$403 ($le).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:119$402 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:117$398 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:117$397 ($gt).
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:119$408_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:121$417_Y.
Removed top 21 bits (of 32) from wire top.$flatten\vga.$add$vga.v:123$422_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:123$428_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:134$438_Y.
Removed top 22 bits (of 32) from wire top.$sub$top_icebreaker.v:73$386_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~634 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\vga.$add$vga.v:119$408 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:121$417 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:123$422 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:123$428 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:134$438 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:160$448 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:182$456 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:228$469 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:234$475 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:263$486 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:274$492 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:290$495 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:305$503 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:309$504 ($add).
  creating $macc model for $flatten\vga.$sub$vga.v:119$405 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:121$414 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:123$420 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:123$425 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:225$466 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:231$472 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:267$487 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:282$494 ($sub).
  creating $macc model for $sub$top_icebreaker.v:73$386 ($sub).
  creating $alu model for $macc $sub$top_icebreaker.v:73$386.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:282$494.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:267$487.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:231$472.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:225$466.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:123$425.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:123$420.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:121$414.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:119$405.
  creating $alu model for $macc $flatten\vga.$add$vga.v:309$504.
  creating $alu model for $macc $flatten\vga.$add$vga.v:305$503.
  creating $alu model for $macc $flatten\vga.$add$vga.v:290$495.
  creating $alu model for $macc $flatten\vga.$add$vga.v:274$492.
  creating $alu model for $macc $flatten\vga.$add$vga.v:263$486.
  creating $alu model for $macc $flatten\vga.$add$vga.v:234$475.
  creating $alu model for $macc $flatten\vga.$add$vga.v:228$469.
  creating $alu model for $macc $flatten\vga.$add$vga.v:182$456.
  creating $alu model for $macc $flatten\vga.$add$vga.v:160$448.
  creating $alu model for $macc $flatten\vga.$add$vga.v:134$438.
  creating $alu model for $macc $flatten\vga.$add$vga.v:123$428.
  creating $alu model for $macc $flatten\vga.$add$vga.v:123$422.
  creating $alu model for $macc $flatten\vga.$add$vga.v:121$417.
  creating $alu model for $macc $flatten\vga.$add$vga.v:119$408.
  creating $alu model for $flatten\vga.$ge$vga.v:158$446 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:256$481 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:298$498 ($ge): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:117$397 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:119$402 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:119$406 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:121$411 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:121$415 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:123$421 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:123$426 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:164$451 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:224$464 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:230$470 ($gt): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:119$403 ($le): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:121$412 ($le): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:256$483 ($le): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:298$500 ($le): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:117$398 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:119$409 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:121$418 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:123$423 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:123$429 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:132$437 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:135$439 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:139$441 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:143$443 ($lt): merged with $flatten\vga.$ge$vga.v:158$446.
  creating $alu model for $flatten\vga.$lt$vga.v:159$447 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:161$449 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:164$452 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:227$467 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:233$473 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:272$491 ($lt): new $alu
  creating $alu cell for $flatten\vga.$lt$vga.v:272$491: $auto$alumacc.cc:485:replace_alu$1084
  creating $alu cell for $flatten\vga.$lt$vga.v:233$473: $auto$alumacc.cc:485:replace_alu$1089
  creating $alu cell for $flatten\vga.$lt$vga.v:227$467: $auto$alumacc.cc:485:replace_alu$1094
  creating $alu cell for $flatten\vga.$lt$vga.v:164$452: $auto$alumacc.cc:485:replace_alu$1099
  creating $alu cell for $flatten\vga.$lt$vga.v:161$449: $auto$alumacc.cc:485:replace_alu$1104
  creating $alu cell for $flatten\vga.$lt$vga.v:159$447: $auto$alumacc.cc:485:replace_alu$1115
  creating $alu cell for $flatten\vga.$lt$vga.v:139$441: $auto$alumacc.cc:485:replace_alu$1120
  creating $alu cell for $flatten\vga.$lt$vga.v:135$439: $auto$alumacc.cc:485:replace_alu$1125
  creating $alu cell for $flatten\vga.$lt$vga.v:132$437: $auto$alumacc.cc:485:replace_alu$1130
  creating $alu cell for $flatten\vga.$lt$vga.v:123$429: $auto$alumacc.cc:485:replace_alu$1135
  creating $alu cell for $flatten\vga.$lt$vga.v:123$423: $auto$alumacc.cc:485:replace_alu$1140
  creating $alu cell for $flatten\vga.$lt$vga.v:121$418: $auto$alumacc.cc:485:replace_alu$1145
  creating $alu cell for $flatten\vga.$lt$vga.v:119$409: $auto$alumacc.cc:485:replace_alu$1150
  creating $alu cell for $flatten\vga.$lt$vga.v:117$398: $auto$alumacc.cc:485:replace_alu$1155
  creating $alu cell for $flatten\vga.$le$vga.v:298$500: $auto$alumacc.cc:485:replace_alu$1166
  creating $alu cell for $flatten\vga.$le$vga.v:256$483: $auto$alumacc.cc:485:replace_alu$1175
  creating $alu cell for $flatten\vga.$le$vga.v:121$412: $auto$alumacc.cc:485:replace_alu$1184
  creating $alu cell for $flatten\vga.$le$vga.v:119$403: $auto$alumacc.cc:485:replace_alu$1193
  creating $alu cell for $flatten\vga.$gt$vga.v:164$451: $auto$alumacc.cc:485:replace_alu$1206
  creating $alu cell for $flatten\vga.$gt$vga.v:123$426: $auto$alumacc.cc:485:replace_alu$1217
  creating $alu cell for $flatten\vga.$gt$vga.v:123$421: $auto$alumacc.cc:485:replace_alu$1228
  creating $alu cell for $flatten\vga.$gt$vga.v:121$415: $auto$alumacc.cc:485:replace_alu$1239
  creating $alu cell for $flatten\vga.$gt$vga.v:121$411: $auto$alumacc.cc:485:replace_alu$1250
  creating $alu cell for $flatten\vga.$gt$vga.v:119$406: $auto$alumacc.cc:485:replace_alu$1261
  creating $alu cell for $flatten\vga.$gt$vga.v:119$402: $auto$alumacc.cc:485:replace_alu$1272
  creating $alu cell for $flatten\vga.$gt$vga.v:117$397: $auto$alumacc.cc:485:replace_alu$1277
  creating $alu cell for $flatten\vga.$ge$vga.v:298$498: $auto$alumacc.cc:485:replace_alu$1282
  creating $alu cell for $flatten\vga.$ge$vga.v:256$481: $auto$alumacc.cc:485:replace_alu$1295
  creating $alu cell for $flatten\vga.$ge$vga.v:158$446, $flatten\vga.$lt$vga.v:143$443: $auto$alumacc.cc:485:replace_alu$1308
  creating $alu cell for $flatten\vga.$gt$vga.v:224$464: $auto$alumacc.cc:485:replace_alu$1321
  creating $alu cell for $flatten\vga.$add$vga.v:119$408: $auto$alumacc.cc:485:replace_alu$1326
  creating $alu cell for $flatten\vga.$gt$vga.v:230$470: $auto$alumacc.cc:485:replace_alu$1329
  creating $alu cell for $flatten\vga.$add$vga.v:121$417: $auto$alumacc.cc:485:replace_alu$1334
  creating $alu cell for $flatten\vga.$add$vga.v:123$422: $auto$alumacc.cc:485:replace_alu$1337
  creating $alu cell for $flatten\vga.$add$vga.v:123$428: $auto$alumacc.cc:485:replace_alu$1340
  creating $alu cell for $flatten\vga.$add$vga.v:134$438: $auto$alumacc.cc:485:replace_alu$1343
  creating $alu cell for $flatten\vga.$add$vga.v:160$448: $auto$alumacc.cc:485:replace_alu$1346
  creating $alu cell for $flatten\vga.$add$vga.v:182$456: $auto$alumacc.cc:485:replace_alu$1349
  creating $alu cell for $flatten\vga.$add$vga.v:228$469: $auto$alumacc.cc:485:replace_alu$1352
  creating $alu cell for $flatten\vga.$add$vga.v:234$475: $auto$alumacc.cc:485:replace_alu$1355
  creating $alu cell for $flatten\vga.$add$vga.v:263$486: $auto$alumacc.cc:485:replace_alu$1358
  creating $alu cell for $flatten\vga.$add$vga.v:274$492: $auto$alumacc.cc:485:replace_alu$1361
  creating $alu cell for $flatten\vga.$add$vga.v:290$495: $auto$alumacc.cc:485:replace_alu$1364
  creating $alu cell for $flatten\vga.$add$vga.v:305$503: $auto$alumacc.cc:485:replace_alu$1367
  creating $alu cell for $flatten\vga.$add$vga.v:309$504: $auto$alumacc.cc:485:replace_alu$1370
  creating $alu cell for $flatten\vga.$sub$vga.v:119$405: $auto$alumacc.cc:485:replace_alu$1373
  creating $alu cell for $flatten\vga.$sub$vga.v:121$414: $auto$alumacc.cc:485:replace_alu$1376
  creating $alu cell for $flatten\vga.$sub$vga.v:123$420: $auto$alumacc.cc:485:replace_alu$1379
  creating $alu cell for $flatten\vga.$sub$vga.v:123$425: $auto$alumacc.cc:485:replace_alu$1382
  creating $alu cell for $flatten\vga.$sub$vga.v:225$466: $auto$alumacc.cc:485:replace_alu$1385
  creating $alu cell for $flatten\vga.$sub$vga.v:231$472: $auto$alumacc.cc:485:replace_alu$1388
  creating $alu cell for $flatten\vga.$sub$vga.v:267$487: $auto$alumacc.cc:485:replace_alu$1391
  creating $alu cell for $flatten\vga.$sub$vga.v:282$494: $auto$alumacc.cc:485:replace_alu$1394
  creating $alu cell for $sub$top_icebreaker.v:73$386: $auto$alumacc.cc:485:replace_alu$1397
  created 54 $alu and 0 $macc cells.

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~15 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

3.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.6. Executing OPT_DFF pass (perform DFF optimizations).

3.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 36 unused wires.
<suppressed ~3 debug messages>

3.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.9. Rerunning OPT passes. (Maybe there is more to do..)

3.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

3.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.13. Executing OPT_DFF pass (perform DFF optimizations).

3.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.16. Finished OPT passes. (There is nothing left to do.)

3.23. Executing MEMORY pass.

3.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

3.26. Executing TECHMAP pass (map to technology primitives).

3.26.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.26.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.27. Executing ICE40_BRAMINIT pass.

3.28. Executing OPT pass (performing simple optimizations).

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~46 debug messages>

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 16 unused cells and 71 unused wires.
<suppressed ~17 debug messages>

3.28.5. Finished fast OPT passes.

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$1013 ($sdffe) from module top (D = $flatten\vga.$procmux$621_Y, Q = \vga.ball_motion_d).
Adding EN signal on $auto$ff.cc:266:slice$1005 ($sdffe) from module top (D = $flatten\vga.$procmux$590_Y, Q = \vga.ball_ratio).

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.9. Rerunning OPT passes. (Maybe there is more to do..)

3.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1513: { $auto$opt_dff.cc:194:make_patterns_logic$1008 $auto$opt_dff.cc:194:make_patterns_logic$1006 $flatten\vga.$eq$vga.v:197$458_Y $flatten\vga.$ne$vga.v:269$488_Y }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1510: { $auto$opt_dff.cc:194:make_patterns_logic$1008 $auto$opt_dff.cc:194:make_patterns_logic$1006 $flatten\vga.$eq$vga.v:197$458_Y $flatten\vga.$ne$vga.v:269$488_Y $flatten\vga.$eq$vga.v:270$489_Y }
  Optimizing cells in module \top.
Performed a total of 2 changes.

3.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.13. Executing OPT_DFF pass (perform DFF optimizations).

3.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.16. Rerunning OPT passes. (Maybe there is more to do..)

3.30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.20. Executing OPT_DFF pass (perform DFF optimizations).

3.30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.23. Finished OPT passes. (There is nothing left to do.)

3.31. Executing ICE40_WRAPCARRY pass (wrap carries).

3.32. Executing TECHMAP pass (map to technology primitives).

3.32.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.32.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$8a62ded8d652be76033db56ea9a2bbb5ea1d4453\_80_ice40_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$a473f4770a4b60111e9e52de7ee27405c26ecd63\_80_ice40_alu for cells of type $alu.
Using template $paramod$403d74038787d91c0514bba9bf1032f6fa919203\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_80_ice40_alu for cells of type $alu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_80_ice40_alu for cells of type $alu.
Using template $paramod$6f67705c43e5e94c02b6ebb52209ce5aa5ade4c1\_80_ice40_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_80_ice40_alu for cells of type $alu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using template $paramod$19189243523493d505a4933d1bad417c570ea8a6\_80_ice40_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_80_ice40_alu for cells of type $alu.
Using template $paramod$c6885379b74fbbf6906b35106e386e521d86cbb2\_80_ice40_alu for cells of type $alu.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$04f121e3c8858ac36578330193fd248b9a31e99c\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using template $paramod$a2af9b43308e3114c3b5dd3f4dc3329b2387395d\_80_ice40_alu for cells of type $alu.
Using template $paramod$b2626aff51a34e60b9c57dceb41667aaf5650a38\_80_ice40_alu for cells of type $alu.
Using template $paramod$21b43a343f2bc4ba62df8a2c90631d371d8e7ce8\_80_ice40_alu for cells of type $alu.
Using template $paramod$8d7f98f10ed0231647041eea72c2a8a293a33560\_80_ice40_alu for cells of type $alu.
Using template $paramod$821d2886e47353e724eaca46af4992e9c3e6ac1d\_80_ice40_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_80_ice40_alu for cells of type $alu.
Using template $paramod$c6b63e723603573fdc33dc74600fd0455fbbc6dc\_80_ice40_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_80_ice40_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~1116 debug messages>

3.33. Executing OPT pass (performing simple optimizations).

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1862 debug messages>

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1620 debug messages>
Removed a total of 540 cells.

3.33.3. Executing OPT_DFF pass (perform DFF optimizations).

3.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 68 unused cells and 1054 unused wires.
<suppressed ~69 debug messages>

3.33.5. Finished fast OPT passes.

3.34. Executing ICE40_OPT pass (performing simple optimizations).

3.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1084.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1089.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1094.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1099.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1104.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1104.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1115.slice[0].carry: CO=\vga.count_v [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1120.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1125.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1130.slice[0].carry: CO=\vga.count_h [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1135.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1135.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1140.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1140.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1145.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1150.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1155.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1155.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1166.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1166.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1175.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1175.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1184.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1193.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1155.BB [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1206.slice[0].carry: CO=\vga.count_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1250.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1272.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1250.X [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1277.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1250.X [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1308.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1125.X [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1321.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1150.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1326.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1326.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1329.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1145.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1334.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1334.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1337.slice[0].carry: CO=\vga.ball_pos_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1337.slice[9].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1340.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1340.slice[8].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1343.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1346.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1349.slice[0].carry: CO=\vga.interval_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1352.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1355.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1358.slice[0].carry: CO=\vga.score_r [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1361.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1364.slice[0].carry: CO=\vga.ball_ratio [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1367.slice[0].carry: CO=\vga.score_l [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1370.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1373.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1373.slice[7].carry: CO=$auto$alumacc.cc:485:replace_alu$1373.C [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1376.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1376.slice[7].carry: CO=$auto$alumacc.cc:485:replace_alu$1376.C [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1379.slice[0].carry: CO=\vga.ball_pos_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1379.slice[9].carry: CO=$auto$alumacc.cc:485:replace_alu$1379.C [9]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1382.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1382.slice[8].carry: CO=$auto$alumacc.cc:485:replace_alu$1382.C [8]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1385.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1388.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1391.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1394.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1397.slice[0].carry: CO=\rst_counter [0]

3.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~16 debug messages>

3.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~393 debug messages>
Removed a total of 131 cells.

3.34.4. Executing OPT_DFF pass (perform DFF optimizations).

3.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 19 unused cells and 14 unused wires.
<suppressed ~20 debug messages>

3.34.6. Rerunning OPT passes. (Removed registers in this run.)

3.34.7. Running ICE40 specific optimizations.

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.34.10. Executing OPT_DFF pass (perform DFF optimizations).

3.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.34.12. Finished OPT passes. (There is nothing left to do.)

3.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
No more expansions possible.
<suppressed ~138 debug messages>

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1094.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1326.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1326.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1334.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1334.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1337.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1337.slice[9].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1340.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1340.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1343.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1346.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1349.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1352.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1355.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1358.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1361.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1364.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1367.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1370.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1373.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1376.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1376.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1379.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1379.slice[9].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1382.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1382.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1385.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1388.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1391.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1394.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1397.slice[0].carry ($lut).

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~467 debug messages>

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~252 debug messages>
Removed a total of 84 cells.

3.39.4. Executing OPT_DFF pass (perform DFF optimizations).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 5 unused cells and 819 unused wires.
<suppressed ~6 debug messages>

3.39.6. Rerunning OPT passes. (Removed registers in this run.)

3.39.7. Running ICE40 specific optimizations.

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

3.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.10. Executing OPT_DFF pass (perform DFF optimizations).

3.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.12. Rerunning OPT passes. (Removed registers in this run.)

3.39.13. Running ICE40 specific optimizations.

3.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.16. Executing OPT_DFF pass (perform DFF optimizations).

3.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.18. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 778 gates and 1090 wires to a netlist network with 310 inputs and 212 outputs.

3.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =     257.
ABC: Participating nodes from both networks       =     526.
ABC: Participating nodes from the first network   =     257. (  67.63 % of nodes)
ABC: Participating nodes from the second network  =     269. (  70.79 % of nodes)
ABC: Node pairs (any polarity)                    =     257. (  67.63 % of names can be moved)
ABC: Node pairs (same polarity)                   =     234. (  61.58 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      379
ABC RESULTS:        internal signals:      568
ABC RESULTS:           input signals:      310
ABC RESULTS:          output signals:      212
Removing temp directory.

3.42. Executing ICE40_WRAPCARRY pass (wrap carries).

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 392 unused cells and 774 unused wires.

3.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      555
  1-LUT              127
  2-LUT               59
  3-LUT              234
  4-LUT              135
  with \SB_CARRY    (#0)  161
  with \SB_CARRY    (#1)  164

Eliminating LUTs.
Number of LUTs:      555
  1-LUT              127
  2-LUT               59
  3-LUT              234
  4-LUT              135
  with \SB_CARRY    (#0)  161
  with \SB_CARRY    (#1)  164

Combining LUTs.
Number of LUTs:      509
  1-LUT              102
  2-LUT               35
  3-LUT              219
  4-LUT              153
  with \SB_CARRY    (#0)  161
  with \SB_CARRY    (#1)  164

Eliminated 0 LUTs.
Combined 46 LUTs.
<suppressed ~4744 debug messages>

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
Using template $paramod$2d07c1a6c53c7b878509360922c4fa5ebedc3011\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod$59c595af41d4a5cce2d588c3a5f1342749ce7a77\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$71d951b20e73043168c1656217d126e617052faa\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$8c24dc0cdd336b7fb88bbf7eed45cec5cbae862b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$12879138d1e376f344e47ea40be66b776233be75\$lut for cells of type $lut.
Using template $paramod$3204210736873ef5d53b95f3dbe4714b354f9351\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$4cf5305612d86489c1a6171729557670bf08582e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01100000 for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$324558e3f64dc829e7fbda8b4d2b00176fe7107f\$lut for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$a59507d273cd827eb6c46c37820d50a1b717efdf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$ff10621ff350133ce54c2c9c3516ef034e8cfe58\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$b4f15f202f50520dbc381cd0880ac94f830f05a8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod$bb4fff1cc3b827238aa40993cafede1c5beecbe3\$lut for cells of type $lut.
Using template $paramod$ae9b8abdb4f811ce37985dd5106af9cd21223954\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod$fc5f41677fb4489852ec7e354cf5cb4082ec5296\$lut for cells of type $lut.
Using template $paramod$ca1d48527df516f209cb40a6149324209c84bc69\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$2d73cf21e7a3b53006ebbae47ecc48e73975ec46\$lut for cells of type $lut.
Using template $paramod$b4f85a6321a00b090afc4e21d68e7b99eb94d149\$lut for cells of type $lut.
Using template $paramod$7df4c08fb0cde7880ba83f9b205aeb94a0e38509\$lut for cells of type $lut.
Using template $paramod$ba05b8a1a425003df083aea0e69541f5cbdc68f2\$lut for cells of type $lut.
Using template $paramod$90edf8d4fe439b92725b09f66e94b5afc9f35376\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$deb4f121bbf3d55ed9a98f692fd112e0918f51b5\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$359fe4e746656bf9c72aecaff84fc7bdea9f55a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$b4d59a169df3392cc49f75ff3f36786eb368b5e7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$165099389eb8a4939f42ee248b3d52273cc32a8a\$lut for cells of type $lut.
Using template $paramod$6f42d6ff04fc43b36b825da9648f9099c2f301ea\$lut for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod$722bfd9af0ae56ca9d1d12a221cb5ede16461f26\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01011100 for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod$fccccf8bb2add7667329c686feec7546eb9a3ae3\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~1435 debug messages>
Removed 0 unused cells and 1100 unused wires.

3.46. Executing AUTONAME pass.
Renamed 33725 objects in module top (72 iterations).
<suppressed ~1478 debug messages>

3.47. Executing HIERARCHY pass (managing design hierarchy).

3.47.1. Analyzing design hierarchy..
Top module:  \top

3.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.48. Printing statistics.

=== top ===

   Number of wires:                392
   Number of wire bits:           2419
   Number of public wires:         392
   Number of public wire bits:    2419
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1164
     SB_CARRY                      538
     SB_DFF                          1
     SB_DFFE                        14
     SB_DFFESR                      31
     SB_DFFESS                      29
     SB_DFFSR                       31
     SB_DFFSS                       10
     SB_LUT4                       509
     SB_PLL40_PAD                    1

3.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.50. Executing JSON backend.

End of script. Logfile hash: e8d8c252d8, CPU: user 1.21s system 0.02s, MEM: 36.70 MB peak
Yosys 0.27+22 (git sha1 53c0a6b78, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 24% 15x read_verilog (0 sec), 16% 25x opt_expr (0 sec), ...
