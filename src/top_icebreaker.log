
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38+4 (git sha1 ac0fb2e30, clang 14.0.0-1ubuntu1.1 -fPIC -Os)


-- Parsing `top_icebreaker.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top_icebreaker.v
Parsing Verilog input from `top_icebreaker.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Parsing `vga.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: vga.v
Parsing Verilog input from `vga.v' to AST representation.
Storing AST representation for module `$abstract\vga'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json top_icebreaker.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\vga'.
Generating RTLIL representation for module `\vga'.

3.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga

3.3.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga
Removing unused module `$abstract\vga'.
Removing unused module `$abstract\top'.
Removed 2 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 16 switch rules as full_case in process $proc$vga.v:479$576 in module vga.
Marked 14 switch rules as full_case in process $proc$vga.v:368$575 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:347$562 in module vga.
Marked 2 switch rules as full_case in process $proc$vga.v:302$531 in module vga.
Marked 12 switch rules as full_case in process $proc$vga.v:235$502 in module vga.
Marked 12 switch rules as full_case in process $proc$vga.v:168$463 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:131$411 in module vga.
Marked 1 switch rules as full_case in process $proc$top_icebreaker.v:100$397 in module top.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 23 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top_icebreaker.v:30$407'.
  Set init value: \rst_counter = 10'1111111111

3.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~95 debug messages>

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\vga.$proc$vga.v:479$576'.
     1/10: $0\ball_angle[3:0] [3]
     2/10: $0\ball_angle[3:0] [2:0]
     3/10: $0\score_r[2:0]
     4/10: $0\hide_l[0:0]
     5/10: $0\score_l[2:0]
     6/10: $0\hide_r[0:0]
     7/10: $0\ball_ratio[2:0]
     8/10: $0\ball_motion_l[0:0]
     9/10: $0\ball_pos_v[8:0]
    10/10: $0\ball_pos_h[9:0]
Creating decoders for process `\vga.$proc$vga.v:368$575'.
     1/2: $0\score_r_pixels[2:0]
     2/2: $0\score_l_pixels[2:0]
Creating decoders for process `\vga.$proc$vga.v:347$562'.
     1/2: $0\paddle_r_pos_v[8:0]
     2/2: $0\paddle_l_pos_v[8:0]
Creating decoders for process `\vga.$proc$vga.v:318$556'.
     1/8: $0\right_down_pressed[0:0]
     2/8: $0\right_up_pressed[0:0]
     3/8: $0\left_down_pressed[0:0]
     4/8: $0\left_up_pressed[0:0]
     5/8: $0\right_down_1d[0:0]
     6/8: $0\right_up_1d[0:0]
     7/8: $0\left_down_1d[0:0]
     8/8: $0\left_up_1d[0:0]
Creating decoders for process `\vga.$proc$vga.v:302$531'.
     1/1: $0\interval_counter[24:0]
Creating decoders for process `\vga.$proc$vga.v:235$502'.
     1/11: $0\vs_out[0:0]
     2/11: $0\count_v_score[0:0]
     3/11: $0\count_v_score_update_4[0:0]
     4/11: $0\count_v_score_update_3[0:0]
     5/11: $0\count_v_score_update_2[0:0]
     6/11: $0\count_v_score_update_1[0:0]
     7/11: $0\count_v_score_update_0[0:0]
     8/11: $0\count_v_paddle_r[0:0]
     9/11: $0\count_v_paddle_l[0:0]
    10/11: $0\count_v[9:0]
    11/11: $0\blank_v[0:0]
Creating decoders for process `\vga.$proc$vga.v:168$463'.
     1/12: $0\count_h[9:0]
     2/12: $0\count_h_score_r_2[0:0]
     3/12: $0\count_h_score_r_1[0:0]
     4/12: $0\count_h_score_r_0[0:0]
     5/12: $0\count_h_score_l_2[0:0]
     6/12: $0\count_h_score_l_1[0:0]
     7/12: $0\count_h_score_l_0[0:0]
     8/12: $0\count_h_paddle_r[0:0]
     9/12: $0\count_h_paddle_l[0:0]
    10/12: $0\count_h_ball[0:0]
    11/12: $0\hs_out[0:0]
    12/12: $0\blank_h[0:0]
Creating decoders for process `\vga.$proc$vga.v:131$411'.
     1/2: $0\grn[0:0]
     2/2: $0\red[0:0]
Creating decoders for process `\top.$proc$top_icebreaker.v:30$407'.
Creating decoders for process `\top.$proc$top_icebreaker.v:100$397'.
     1/2: $0\rst[0:0]
     2/2: $0\rst_counter[9:0]

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$1427' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$1428' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$1429' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$1430' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$1431' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$1432' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$1433' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$1434' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$1435' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$1436' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$1437' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$1438' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$1439' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$1440' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$1441' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$1442' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$1443' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$1444' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$1445' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$1446' with positive edge clock.
Creating register for signal `\vga.\ball_pos_h' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1447' with positive edge clock.
Creating register for signal `\vga.\ball_pos_v' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\vga.\ball_motion_l' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\vga.\ball_ratio' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\vga.\ball_angle' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\vga.\score_l' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\vga.\hide_l' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\vga.\score_r' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1454' with positive edge clock.
Creating register for signal `\vga.\hide_r' using process `\vga.$proc$vga.v:479$576'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\vga.\score_l_pixels' using process `\vga.$proc$vga.v:368$575'.
  created $dff cell `$procdff$1456' with positive edge clock.
Creating register for signal `\vga.\score_r_pixels' using process `\vga.$proc$vga.v:368$575'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\vga.\paddle_l_pos_v' using process `\vga.$proc$vga.v:347$562'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\vga.\paddle_r_pos_v' using process `\vga.$proc$vga.v:347$562'.
  created $dff cell `$procdff$1459' with positive edge clock.
Creating register for signal `\vga.\left_up_1d' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1460' with positive edge clock.
Creating register for signal `\vga.\left_down_1d' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1461' with positive edge clock.
Creating register for signal `\vga.\right_up_1d' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1462' with positive edge clock.
Creating register for signal `\vga.\right_down_1d' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\vga.\left_up_pressed' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1464' with positive edge clock.
Creating register for signal `\vga.\left_down_pressed' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1465' with positive edge clock.
Creating register for signal `\vga.\right_up_pressed' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1466' with positive edge clock.
Creating register for signal `\vga.\right_down_pressed' using process `\vga.$proc$vga.v:318$556'.
  created $dff cell `$procdff$1467' with positive edge clock.
Creating register for signal `\vga.\interval_counter' using process `\vga.$proc$vga.v:302$531'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `\vga.\blank_v' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\vga.\count_v' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `\vga.\count_v_paddle_l' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `\vga.\count_v_paddle_r' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_0' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_1' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1474' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_2' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1475' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_3' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1476' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_4' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1477' with positive edge clock.
Creating register for signal `\vga.\count_v_score' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1478' with positive edge clock.
Creating register for signal `\vga.\vs_out' using process `\vga.$proc$vga.v:235$502'.
  created $dff cell `$procdff$1479' with positive edge clock.
Creating register for signal `\vga.\blank_h' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1480' with positive edge clock.
Creating register for signal `\vga.\count_h' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1481' with positive edge clock.
Creating register for signal `\vga.\count_h_ball' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1482' with positive edge clock.
Creating register for signal `\vga.\count_h_paddle_l' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1483' with positive edge clock.
Creating register for signal `\vga.\count_h_paddle_r' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1484' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_0' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1485' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_1' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1486' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_2' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1487' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_0' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1488' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_1' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1489' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_2' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1490' with positive edge clock.
Creating register for signal `\vga.\hs_out' using process `\vga.$proc$vga.v:168$463'.
  created $dff cell `$procdff$1491' with positive edge clock.
Creating register for signal `\vga.\red' using process `\vga.$proc$vga.v:131$411'.
  created $dff cell `$procdff$1492' with positive edge clock.
Creating register for signal `\vga.\grn' using process `\vga.$proc$vga.v:131$411'.
  created $dff cell `$procdff$1493' with positive edge clock.
Creating register for signal `\top.\rst_counter' using process `\top.$proc$top_icebreaker.v:100$397'.
  created $dff cell `$procdff$1494' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top_icebreaker.v:100$397'.
  created $dff cell `$procdff$1495' with positive edge clock.

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 20 empty switches in `\vga.$proc$vga.v:479$576'.
Removing empty process `vga.$proc$vga.v:479$576'.
Found and cleaned up 15 empty switches in `\vga.$proc$vga.v:368$575'.
Removing empty process `vga.$proc$vga.v:368$575'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:347$562'.
Removing empty process `vga.$proc$vga.v:347$562'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:318$556'.
Removing empty process `vga.$proc$vga.v:318$556'.
Found and cleaned up 2 empty switches in `\vga.$proc$vga.v:302$531'.
Removing empty process `vga.$proc$vga.v:302$531'.
Found and cleaned up 13 empty switches in `\vga.$proc$vga.v:235$502'.
Removing empty process `vga.$proc$vga.v:235$502'.
Found and cleaned up 14 empty switches in `\vga.$proc$vga.v:168$463'.
Removing empty process `vga.$proc$vga.v:168$463'.
Found and cleaned up 1 empty switch in `\vga.$proc$vga.v:131$411'.
Removing empty process `vga.$proc$vga.v:131$411'.
Removing empty process `top.$proc$top_icebreaker.v:30$407'.
Found and cleaned up 2 empty switches in `\top.$proc$top_icebreaker.v:100$397'.
Removing empty process `top.$proc$top_icebreaker.v:100$397'.
Cleaned up 95 empty switches.

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga.
<suppressed ~35 debug messages>
Optimizing module top.
<suppressed ~9 debug messages>

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module vga.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~10 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 341 unused wires.
<suppressed ~3 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~165 debug messages>
Removed a total of 55 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\vga.$procmux$690: \vga.ball_angle [3] -> 1'1
      Replacing known input bits on port B of cell $flatten\vga.$procmux$686: \vga.ball_angle [3] -> 1'0
      Replacing known input bits on port B of cell $flatten\vga.$procmux$666: \vga.ball_angle [3] -> 1'1
      Replacing known input bits on port B of cell $flatten\vga.$procmux$662: \vga.ball_angle [3] -> 1'0
      Replacing known input bits on port A of cell $flatten\vga.$procmux$851: \vga.ball_motion_l -> 1'1
      Replacing known input bits on port A of cell $flatten\vga.$procmux$849: \vga.ball_motion_l -> 1'1
      Replacing known input bits on port A of cell $flatten\vga.$procmux$844: \vga.ball_motion_l -> 1'0
      Replacing known input bits on port A of cell $flatten\vga.$procmux$842: \vga.ball_motion_l -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~62 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\vga.$procmux$1002: { $flatten\vga.$procmux$1005_CMP $flatten\vga.$procmux$1004_CMP $auto$opt_reduce.cc:134:opt_pmux$1497 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$1011: { $flatten\vga.$procmux$1006_CMP $flatten\vga.$procmux$1005_CMP $auto$opt_reduce.cc:134:opt_pmux$1499 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$1023: { $flatten\vga.$procmux$1005_CMP $auto$opt_reduce.cc:134:opt_pmux$1503 $auto$opt_reduce.cc:134:opt_pmux$1501 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$941: { $flatten\vga.$procmux$946_CMP $auto$opt_reduce.cc:134:opt_pmux$1505 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$952: { $flatten\vga.$procmux$946_CMP $flatten\vga.$procmux$945_CMP $auto$opt_reduce.cc:134:opt_pmux$1507 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$961: { $flatten\vga.$procmux$947_CMP $flatten\vga.$procmux$946_CMP $auto$opt_reduce.cc:134:opt_pmux$1509 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$973: { $flatten\vga.$procmux$946_CMP $auto$opt_reduce.cc:134:opt_pmux$1513 $auto$opt_reduce.cc:134:opt_pmux$1511 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$991: { $flatten\vga.$procmux$1005_CMP $auto$opt_reduce.cc:134:opt_pmux$1515 }
  Optimizing cells in module \top.
Performed a total of 8 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 68 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.vga.score_l_pixels as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.vga.score_r_pixels as FSM state register:
    Users of register don't seem to benefit from recoding.

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~61 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1494 ($dff) from module top (D = $sub$top_icebreaker.v:104$399_Y [9:0], Q = \rst_counter).
Adding SRST signal on $flatten\vga.$procdff$1492 ($dff) from module top (D = $flatten\vga.$ternary$vga.v:145$461_Y, Q = \vga.red, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1491 ($dff) from module top (D = $flatten\vga.$procmux$1387_Y, Q = \vga.hs_out, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1490 ($dff) from module top (D = $flatten\vga.$procmux$1224_Y, Q = \vga.count_h_score_r_2, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1489 ($dff) from module top (D = $flatten\vga.$procmux$1254_Y, Q = \vga.count_h_score_r_1, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1488 ($dff) from module top (D = $flatten\vga.$procmux$1281_Y, Q = \vga.count_h_score_r_0, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1487 ($dff) from module top (D = $flatten\vga.$procmux$1305_Y, Q = \vga.count_h_score_l_2, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1486 ($dff) from module top (D = $flatten\vga.$procmux$1326_Y, Q = \vga.count_h_score_l_1, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1485 ($dff) from module top (D = $flatten\vga.$procmux$1344_Y, Q = \vga.count_h_score_l_0, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1484 ($dff) from module top (D = $flatten\vga.$procmux$1359_Y, Q = \vga.count_h_paddle_r, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1483 ($dff) from module top (D = $flatten\vga.$procmux$1371_Y, Q = \vga.count_h_paddle_l, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1482 ($dff) from module top (D = $flatten\vga.$procmux$1379_Y, Q = \vga.count_h_ball, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1481 ($dff) from module top (D = $flatten\vga.$procmux$1218_Y, Q = \vga.count_h, rval = 10'1111111111).
Adding SRST signal on $flatten\vga.$procdff$1480 ($dff) from module top (D = $flatten\vga.$procmux$1408_Y, Q = \vga.blank_h, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1571 ($sdff) from module top (D = $flatten\vga.$procmux$1405_Y, Q = \vga.blank_h).
Adding SRST signal on $flatten\vga.$procdff$1479 ($dff) from module top (D = $flatten\vga.$procmux$1093_Y, Q = \vga.vs_out, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1581 ($sdff) from module top (D = $flatten\vga.$procmux$1086_Y, Q = \vga.vs_out).
Adding EN signal on $flatten\vga.$procdff$1478 ($dff) from module top (D = $flatten\vga.$procmux$1100_Y, Q = \vga.count_v_score).
Adding EN signal on $flatten\vga.$procdff$1477 ($dff) from module top (D = $flatten\vga.$procmux$1111_Y, Q = \vga.count_v_score_update_4).
Adding EN signal on $flatten\vga.$procdff$1476 ($dff) from module top (D = $flatten\vga.$procmux$1122_Y, Q = \vga.count_v_score_update_3).
Adding EN signal on $flatten\vga.$procdff$1475 ($dff) from module top (D = $flatten\vga.$procmux$1133_Y, Q = \vga.count_v_score_update_2).
Adding EN signal on $flatten\vga.$procdff$1474 ($dff) from module top (D = $flatten\vga.$procmux$1144_Y, Q = \vga.count_v_score_update_1).
Adding EN signal on $flatten\vga.$procdff$1473 ($dff) from module top (D = $flatten\vga.$procmux$1155_Y, Q = \vga.count_v_score_update_0).
Adding EN signal on $flatten\vga.$procdff$1472 ($dff) from module top (D = $flatten\vga.$procmux$1166_Y, Q = \vga.count_v_paddle_r).
Adding EN signal on $flatten\vga.$procdff$1471 ($dff) from module top (D = $flatten\vga.$procmux$1177_Y, Q = \vga.count_v_paddle_l).
Adding SRST signal on $flatten\vga.$procdff$1470 ($dff) from module top (D = $flatten\vga.$procmux$1192_Y, Q = \vga.count_v, rval = 10'0111111111).
Adding EN signal on $auto$ff.cc:266:slice$1627 ($sdff) from module top (D = $flatten\vga.$procmux$1190_Y, Q = \vga.count_v).
Adding SRST signal on $flatten\vga.$procdff$1469 ($dff) from module top (D = $flatten\vga.$procmux$1203_Y, Q = \vga.blank_v, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1629 ($sdff) from module top (D = $flatten\vga.$procmux$1198_Y, Q = \vga.blank_v).
Adding SRST signal on $flatten\vga.$procdff$1468 ($dff) from module top (D = $flatten\vga.$add$vga.v:310$555_Y [24:0], Q = \vga.interval_counter, rval = 25'0000000000000000000000000).
Adding SRST signal on $flatten\vga.$procdff$1467 ($dff) from module top (D = $flatten\vga.$procmux$1054_Y, Q = \vga.right_down_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1466 ($dff) from module top (D = $flatten\vga.$procmux$1058_Y, Q = \vga.right_up_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1465 ($dff) from module top (D = $flatten\vga.$procmux$1062_Y, Q = \vga.left_down_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1464 ($dff) from module top (D = $flatten\vga.$procmux$1066_Y, Q = \vga.left_up_pressed, rval = 1'0).
Adding EN signal on $flatten\vga.$procdff$1463 ($dff) from module top (D = \vga.right_down, Q = \vga.right_down_1d).
Adding EN signal on $flatten\vga.$procdff$1462 ($dff) from module top (D = \vga.right_up, Q = \vga.right_up_1d).
Adding EN signal on $flatten\vga.$procdff$1461 ($dff) from module top (D = \vga.left_down, Q = \vga.left_down_1d).
Adding EN signal on $flatten\vga.$procdff$1460 ($dff) from module top (D = \vga.left_up, Q = \vga.left_up_1d).
Adding SRST signal on $flatten\vga.$procdff$1459 ($dff) from module top (D = $flatten\vga.$procmux$1042_Y, Q = \vga.paddle_r_pos_v, rval = 9'011101111).
Adding EN signal on $auto$ff.cc:266:slice$1648 ($sdff) from module top (D = $flatten\vga.$procmux$1042_Y, Q = \vga.paddle_r_pos_v).
Adding SRST signal on $flatten\vga.$procdff$1458 ($dff) from module top (D = $flatten\vga.$procmux$1049_Y, Q = \vga.paddle_l_pos_v, rval = 9'011101111).
Adding EN signal on $auto$ff.cc:266:slice$1652 ($sdff) from module top (D = $flatten\vga.$procmux$1049_Y, Q = \vga.paddle_l_pos_v).
Adding EN signal on $flatten\vga.$procdff$1457 ($dff) from module top (D = $flatten\vga.$0\score_r_pixels[2:0], Q = \vga.score_r_pixels).
Adding EN signal on $flatten\vga.$procdff$1456 ($dff) from module top (D = $flatten\vga.$0\score_l_pixels[2:0], Q = \vga.score_l_pixels).
Adding SRST signal on $flatten\vga.$procdff$1455 ($dff) from module top (D = $flatten\vga.$procmux$811_Y, Q = \vga.hide_r, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1454 ($dff) from module top (D = $flatten\vga.$procmux$754_Y, Q = \vga.score_r, rval = 3'000).
Adding SRST signal on $flatten\vga.$procdff$1453 ($dff) from module top (D = $flatten\vga.$procmux$773_Y, Q = \vga.hide_l, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1452 ($dff) from module top (D = $flatten\vga.$procmux$792_Y, Q = \vga.score_l, rval = 3'000).
Adding SRST signal on $flatten\vga.$procdff$1451 ($dff) from module top (D = { $flatten\vga.$procmux$709_Y $flatten\vga.$procmux$735_Y }, Q = \vga.ball_angle, rval = 4'1001).
Adding EN signal on $auto$ff.cc:266:slice$1666 ($sdff) from module top (D = $flatten\vga.$procmux$733_Y, Q = \vga.ball_angle [2:0]).
Adding EN signal on $auto$ff.cc:266:slice$1666 ($sdff) from module top (D = $flatten\vga.$procmux$707_Y, Q = \vga.ball_angle [3]).
Adding SRST signal on $flatten\vga.$procdff$1450 ($dff) from module top (D = $flatten\vga.$procmux$835_Y, Q = \vga.ball_ratio, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1693 ($sdff) from module top (D = $flatten\vga.$procmux$833_Y, Q = \vga.ball_ratio).
Adding SRST signal on $flatten\vga.$procdff$1449 ($dff) from module top (D = $flatten\vga.$procmux$855_Y, Q = \vga.ball_motion_l, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1701 ($sdff) from module top (D = $flatten\vga.$procmux$853_Y, Q = \vga.ball_motion_l).
Adding SRST signal on $flatten\vga.$procdff$1448 ($dff) from module top (D = $flatten\vga.$procmux$909_Y, Q = \vga.ball_pos_v, rval = 9'011101111).
Adding EN signal on $auto$ff.cc:266:slice$1703 ($sdff) from module top (D = $flatten\vga.$procmux$907_Y, Q = \vga.ball_pos_v).
Adding SRST signal on $flatten\vga.$procdff$1447 ($dff) from module top (D = $flatten\vga.$procmux$935_Y, Q = \vga.ball_pos_h, rval = 10'1001101111).
Adding EN signal on $auto$ff.cc:266:slice$1715 ($sdff) from module top (D = $flatten\vga.$procmux$933_Y, Q = \vga.ball_pos_h).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 117 unused cells and 116 unused wires.
<suppressed ~119 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 40 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$sub$top_icebreaker.v:104$399 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$sub$top_icebreaker.v:104$399 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1576 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1574 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1696 ($ne).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$1015_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\vga.$procmux$1005_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$1004_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$flatten\vga.$procmux$946_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$945_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$944_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1669 ($ne).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:564$607 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:564$607 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:556$605 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:556$605 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:541$597 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:541$597 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:533$596 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:533$596 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:525$594 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:525$594 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:523$593 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:518$589 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:518$589 ($sub).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:511$588 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:511$588 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:510$587 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:510$587 ($add).
Removed top 6 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:501$580 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:362$574 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:362$574 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:361$572 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:359$571 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:359$571 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:358$569 ($gt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:356$568 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:356$568 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:355$566 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:353$565 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:353$565 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:352$563 ($gt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:310$555 ($add).
Removed top 7 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:310$555 ($add).
Removed top 8 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:309$552 ($ne).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:308$546 ($ne).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:307$540 ($ne).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:306$535 ($ne).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:289$529 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:289$528 ($gt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:286$526 ($lt).
Removed top 4 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:281$525 ($eq).
Removed top 4 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:276$524 ($eq).
Removed top 4 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:271$523 ($eq).
Removed top 5 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:266$522 ($eq).
Removed top 5 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:261$521 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:255$519 ($lt).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:255$518 ($ge).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:250$515 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:250$514 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:250$514 ($add).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:250$512 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:250$512 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:245$509 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:245$508 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:245$508 ($add).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:245$506 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:245$506 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:243$505 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:243$505 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:241$504 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:240$503 ($ge).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:225$500 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:221$498 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:217$496 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:214$494 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:214$493 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:211$491 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:211$490 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:208$488 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:208$487 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:204$485 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:204$484 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:201$482 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:201$481 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:198$479 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:198$478 ($ge).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:194$476 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:194$475 ($ge).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:190$473 ($lt).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:190$472 ($ge).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:186$469 ($sub).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:186$468 ($add).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:186$468 ($add).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:186$466 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:186$466 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:184$465 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:184$465 ($add).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:182$464 ($lt).
Removed top 1 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1671 ($ne).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:153$430 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:153$430 ($add).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:153$427 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:153$427 ($sub).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:147$421 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:147$420 ($gt).
Removed top 1 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:145$417 ($eq).
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:153$430_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:184$465_Y.
Removed top 21 bits (of 32) from wire top.$flatten\vga.$add$vga.v:186$468_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:243$505_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:245$508_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:250$514_Y.
Removed top 7 bits (of 32) from wire top.$flatten\vga.$add$vga.v:310$555_Y.
Removed top 22 bits (of 32) from wire top.$sub$top_icebreaker.v:104$399_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~998 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\vga.$add$vga.v:153$430 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:184$465 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:186$468 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:243$505 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:245$508 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:250$514 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:310$555 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:356$568 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:362$574 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:510$587 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:511$588 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:525$594 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:541$597 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:556$605 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:564$607 ($add).
  creating $macc model for $flatten\vga.$sub$vga.v:153$427 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:186$466 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:186$469 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:245$506 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:245$509 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:250$512 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:250$515 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:353$565 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:359$571 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:518$589 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:533$596 ($sub).
  creating $macc model for $sub$top_icebreaker.v:104$399 ($sub).
  creating $alu model for $macc $sub$top_icebreaker.v:104$399.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:533$596.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:518$589.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:359$571.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:353$565.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:250$515.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:250$512.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:245$509.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:245$506.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:186$469.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:186$466.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:153$427.
  creating $alu model for $macc $flatten\vga.$add$vga.v:564$607.
  creating $alu model for $macc $flatten\vga.$add$vga.v:556$605.
  creating $alu model for $macc $flatten\vga.$add$vga.v:541$597.
  creating $alu model for $macc $flatten\vga.$add$vga.v:525$594.
  creating $alu model for $macc $flatten\vga.$add$vga.v:511$588.
  creating $alu model for $macc $flatten\vga.$add$vga.v:510$587.
  creating $alu model for $macc $flatten\vga.$add$vga.v:362$574.
  creating $alu model for $macc $flatten\vga.$add$vga.v:356$568.
  creating $alu model for $macc $flatten\vga.$add$vga.v:310$555.
  creating $alu model for $macc $flatten\vga.$add$vga.v:250$514.
  creating $alu model for $macc $flatten\vga.$add$vga.v:245$508.
  creating $alu model for $macc $flatten\vga.$add$vga.v:243$505.
  creating $alu model for $macc $flatten\vga.$add$vga.v:186$468.
  creating $alu model for $macc $flatten\vga.$add$vga.v:184$465.
  creating $alu model for $macc $flatten\vga.$add$vga.v:153$430.
  creating $alu model for $flatten\vga.$ge$vga.v:186$467 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:190$472 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:194$475 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:198$478 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:201$481 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:204$484 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:208$487 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:211$490 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:214$493 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:240$503 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:245$507 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:250$513 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:255$518 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:503$582 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:549$600 ($ge): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:147$420 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:153$428 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:289$528 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:352$563 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:358$569 ($gt): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:503$584 ($le): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:549$602 ($le): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:147$421 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:153$431 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:182$464 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:186$470 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:190$473 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:194$476 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:198$479 ($lt): merged with $flatten\vga.$ge$vga.v:201$481.
  creating $alu model for $flatten\vga.$lt$vga.v:201$482 ($lt): merged with $flatten\vga.$ge$vga.v:204$484.
  creating $alu model for $flatten\vga.$lt$vga.v:204$485 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:208$488 ($lt): merged with $flatten\vga.$ge$vga.v:211$490.
  creating $alu model for $flatten\vga.$lt$vga.v:211$491 ($lt): merged with $flatten\vga.$ge$vga.v:214$493.
  creating $alu model for $flatten\vga.$lt$vga.v:214$494 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:217$496 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:221$498 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:225$500 ($lt): merged with $flatten\vga.$ge$vga.v:240$503.
  creating $alu model for $flatten\vga.$lt$vga.v:241$504 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:245$510 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:250$516 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:255$519 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:286$526 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:289$529 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:355$566 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:361$572 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:523$593 ($lt): new $alu
  creating $alu model for $flatten\vga.$eq$vga.v:145$414 ($eq): merged with $flatten\vga.$lt$vga.v:182$464.
  creating $alu model for $flatten\vga.$eq$vga.v:145$417 ($eq): merged with $flatten\vga.$lt$vga.v:241$504.
  creating $alu cell for $flatten\vga.$lt$vga.v:523$593: $auto$alumacc.cc:485:replace_alu$1777
  creating $alu cell for $flatten\vga.$lt$vga.v:361$572: $auto$alumacc.cc:485:replace_alu$1782
  creating $alu cell for $flatten\vga.$lt$vga.v:355$566: $auto$alumacc.cc:485:replace_alu$1787
  creating $alu cell for $flatten\vga.$lt$vga.v:289$529: $auto$alumacc.cc:485:replace_alu$1792
  creating $alu cell for $flatten\vga.$lt$vga.v:286$526: $auto$alumacc.cc:485:replace_alu$1803
  creating $alu cell for $flatten\vga.$lt$vga.v:255$519: $auto$alumacc.cc:485:replace_alu$1814
  creating $alu cell for $flatten\vga.$lt$vga.v:250$516: $auto$alumacc.cc:485:replace_alu$1825
  creating $alu cell for $flatten\vga.$lt$vga.v:245$510: $auto$alumacc.cc:485:replace_alu$1830
  creating $alu cell for $flatten\vga.$lt$vga.v:241$504, $flatten\vga.$eq$vga.v:145$417: $auto$alumacc.cc:485:replace_alu$1835
  creating $alu cell for $flatten\vga.$lt$vga.v:221$498: $auto$alumacc.cc:485:replace_alu$1846
  creating $alu cell for $flatten\vga.$lt$vga.v:217$496: $auto$alumacc.cc:485:replace_alu$1857
  creating $alu cell for $flatten\vga.$lt$vga.v:214$494: $auto$alumacc.cc:485:replace_alu$1868
  creating $alu cell for $flatten\vga.$lt$vga.v:204$485: $auto$alumacc.cc:485:replace_alu$1879
  creating $alu cell for $flatten\vga.$lt$vga.v:194$476: $auto$alumacc.cc:485:replace_alu$1890
  creating $alu cell for $flatten\vga.$lt$vga.v:190$473: $auto$alumacc.cc:485:replace_alu$1895
  creating $alu cell for $flatten\vga.$lt$vga.v:186$470: $auto$alumacc.cc:485:replace_alu$1906
  creating $alu cell for $flatten\vga.$lt$vga.v:182$464, $flatten\vga.$eq$vga.v:145$414: $auto$alumacc.cc:485:replace_alu$1911
  creating $alu cell for $flatten\vga.$lt$vga.v:153$431: $auto$alumacc.cc:485:replace_alu$1922
  creating $alu cell for $flatten\vga.$lt$vga.v:147$421: $auto$alumacc.cc:485:replace_alu$1927
  creating $alu cell for $flatten\vga.$le$vga.v:549$602: $auto$alumacc.cc:485:replace_alu$1938
  creating $alu cell for $flatten\vga.$le$vga.v:503$584: $auto$alumacc.cc:485:replace_alu$1947
  creating $alu cell for $flatten\vga.$gt$vga.v:289$528: $auto$alumacc.cc:485:replace_alu$1956
  creating $alu cell for $flatten\vga.$gt$vga.v:153$428: $auto$alumacc.cc:485:replace_alu$1961
  creating $alu cell for $flatten\vga.$gt$vga.v:147$420: $auto$alumacc.cc:485:replace_alu$1972
  creating $alu cell for $flatten\vga.$ge$vga.v:549$600: $auto$alumacc.cc:485:replace_alu$1977
  creating $alu cell for $flatten\vga.$ge$vga.v:503$582: $auto$alumacc.cc:485:replace_alu$1990
  creating $alu cell for $flatten\vga.$ge$vga.v:255$518: $auto$alumacc.cc:485:replace_alu$2003
  creating $alu cell for $flatten\vga.$ge$vga.v:250$513: $auto$alumacc.cc:485:replace_alu$2012
  creating $alu cell for $flatten\vga.$ge$vga.v:245$507: $auto$alumacc.cc:485:replace_alu$2025
  creating $alu cell for $flatten\vga.$ge$vga.v:240$503, $flatten\vga.$lt$vga.v:225$500: $auto$alumacc.cc:485:replace_alu$2038
  creating $alu cell for $flatten\vga.$ge$vga.v:214$493, $flatten\vga.$lt$vga.v:211$491: $auto$alumacc.cc:485:replace_alu$2051
  creating $alu cell for $flatten\vga.$ge$vga.v:211$490, $flatten\vga.$lt$vga.v:208$488: $auto$alumacc.cc:485:replace_alu$2064
  creating $alu cell for $flatten\vga.$ge$vga.v:208$487: $auto$alumacc.cc:485:replace_alu$2077
  creating $alu cell for $flatten\vga.$ge$vga.v:204$484, $flatten\vga.$lt$vga.v:201$482: $auto$alumacc.cc:485:replace_alu$2086
  creating $alu cell for $flatten\vga.$ge$vga.v:201$481, $flatten\vga.$lt$vga.v:198$479: $auto$alumacc.cc:485:replace_alu$2099
  creating $alu cell for $flatten\vga.$ge$vga.v:198$478: $auto$alumacc.cc:485:replace_alu$2112
  creating $alu cell for $flatten\vga.$ge$vga.v:194$475: $auto$alumacc.cc:485:replace_alu$2121
  creating $alu cell for $flatten\vga.$ge$vga.v:190$472: $auto$alumacc.cc:485:replace_alu$2134
  creating $alu cell for $flatten\vga.$ge$vga.v:186$467: $auto$alumacc.cc:485:replace_alu$2143
  creating $alu cell for $flatten\vga.$add$vga.v:153$430: $auto$alumacc.cc:485:replace_alu$2156
  creating $alu cell for $flatten\vga.$add$vga.v:184$465: $auto$alumacc.cc:485:replace_alu$2159
  creating $alu cell for $flatten\vga.$add$vga.v:186$468: $auto$alumacc.cc:485:replace_alu$2162
  creating $alu cell for $flatten\vga.$add$vga.v:243$505: $auto$alumacc.cc:485:replace_alu$2165
  creating $alu cell for $flatten\vga.$gt$vga.v:352$563: $auto$alumacc.cc:485:replace_alu$2168
  creating $alu cell for $flatten\vga.$add$vga.v:245$508: $auto$alumacc.cc:485:replace_alu$2173
  creating $alu cell for $flatten\vga.$gt$vga.v:358$569: $auto$alumacc.cc:485:replace_alu$2176
  creating $alu cell for $flatten\vga.$add$vga.v:250$514: $auto$alumacc.cc:485:replace_alu$2181
  creating $alu cell for $flatten\vga.$add$vga.v:310$555: $auto$alumacc.cc:485:replace_alu$2184
  creating $alu cell for $flatten\vga.$add$vga.v:356$568: $auto$alumacc.cc:485:replace_alu$2187
  creating $alu cell for $flatten\vga.$add$vga.v:362$574: $auto$alumacc.cc:485:replace_alu$2190
  creating $alu cell for $flatten\vga.$add$vga.v:510$587: $auto$alumacc.cc:485:replace_alu$2193
  creating $alu cell for $flatten\vga.$add$vga.v:511$588: $auto$alumacc.cc:485:replace_alu$2196
  creating $alu cell for $flatten\vga.$add$vga.v:525$594: $auto$alumacc.cc:485:replace_alu$2199
  creating $alu cell for $flatten\vga.$add$vga.v:541$597: $auto$alumacc.cc:485:replace_alu$2202
  creating $alu cell for $flatten\vga.$add$vga.v:556$605: $auto$alumacc.cc:485:replace_alu$2205
  creating $alu cell for $flatten\vga.$add$vga.v:564$607: $auto$alumacc.cc:485:replace_alu$2208
  creating $alu cell for $flatten\vga.$sub$vga.v:153$427: $auto$alumacc.cc:485:replace_alu$2211
  creating $alu cell for $flatten\vga.$sub$vga.v:186$466: $auto$alumacc.cc:485:replace_alu$2214
  creating $alu cell for $flatten\vga.$sub$vga.v:186$469: $auto$alumacc.cc:485:replace_alu$2217
  creating $alu cell for $flatten\vga.$sub$vga.v:245$506: $auto$alumacc.cc:485:replace_alu$2220
  creating $alu cell for $flatten\vga.$sub$vga.v:245$509: $auto$alumacc.cc:485:replace_alu$2223
  creating $alu cell for $flatten\vga.$sub$vga.v:250$512: $auto$alumacc.cc:485:replace_alu$2226
  creating $alu cell for $flatten\vga.$sub$vga.v:250$515: $auto$alumacc.cc:485:replace_alu$2229
  creating $alu cell for $flatten\vga.$sub$vga.v:353$565: $auto$alumacc.cc:485:replace_alu$2232
  creating $alu cell for $flatten\vga.$sub$vga.v:359$571: $auto$alumacc.cc:485:replace_alu$2235
  creating $alu cell for $flatten\vga.$sub$vga.v:518$589: $auto$alumacc.cc:485:replace_alu$2238
  creating $alu cell for $flatten\vga.$sub$vga.v:533$596: $auto$alumacc.cc:485:replace_alu$2241
  creating $alu cell for $sub$top_icebreaker.v:104$399: $auto$alumacc.cc:485:replace_alu$2244
  created 68 $alu and 0 $macc cells.

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~15 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

3.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.6. Executing OPT_DFF pass (perform DFF optimizations).

3.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 51 unused wires.
<suppressed ~2 debug messages>

3.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.9. Rerunning OPT passes. (Maybe there is more to do..)

3.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

3.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.13. Executing OPT_DFF pass (perform DFF optimizations).

3.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.16. Finished OPT passes. (There is nothing left to do.)

3.23. Executing MEMORY pass.

3.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

3.26. Executing TECHMAP pass (map to technology primitives).

3.26.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.26.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.27. Executing ICE40_BRAMINIT pass.

3.28. Executing OPT pass (performing simple optimizations).

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~72 debug messages>

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 13 unused cells and 98 unused wires.
<suppressed ~14 debug messages>

3.28.5. Finished fast OPT passes.

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $pmux cell $flatten\vga.$procmux$1035:
      Old ports: A=3'111, B=6'010101, Y=$flatten\vga.$procmux$1035_Y
      New ports: A=2'11, B=4'1001, Y=$flatten\vga.$procmux$1035_Y [1:0]
      New connections: $flatten\vga.$procmux$1035_Y [2] = $flatten\vga.$procmux$1035_Y [0]
    Consolidated identical input bits for $pmux cell $flatten\vga.$procmux$985:
      Old ports: A=3'111, B=6'010101, Y=$flatten\vga.$procmux$985_Y
      New ports: A=2'11, B=4'1001, Y=$flatten\vga.$procmux$985_Y [1:0]
      New connections: $flatten\vga.$procmux$985_Y [2] = $flatten\vga.$procmux$985_Y [0]
  Optimizing cells in module \top.
Performed a total of 2 changes.

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$1694 ($sdffe) from module top (D = $flatten\vga.$procmux$817_Y, Q = \vga.ball_ratio).

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.9. Rerunning OPT passes. (Maybe there is more to do..)

3.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

3.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2359: { $auto$opt_dff.cc:194:make_patterns_logic$1695 $auto$opt_dff.cc:194:make_patterns_logic$1697 $flatten\vga.$eq$vga.v:325$557_Y $flatten\vga.$ne$vga.v:520$590_Y }
  Optimizing cells in module \top.
Performed a total of 1 changes.

3.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.13. Executing OPT_DFF pass (perform DFF optimizations).

3.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.16. Rerunning OPT passes. (Maybe there is more to do..)

3.30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

3.30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.20. Executing OPT_DFF pass (perform DFF optimizations).

3.30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.23. Finished OPT passes. (There is nothing left to do.)

3.31. Executing ICE40_WRAPCARRY pass (wrap carries).

3.32. Executing TECHMAP pass (map to technology primitives).

3.32.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.32.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$19189243523493d505a4933d1bad417c570ea8a6\_80_ice40_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$a473f4770a4b60111e9e52de7ee27405c26ecd63\_80_ice40_alu for cells of type $alu.
Using template $paramod$403d74038787d91c0514bba9bf1032f6fa919203\_80_ice40_alu for cells of type $alu.
Using template $paramod$8a62ded8d652be76033db56ea9a2bbb5ea1d4453\_80_ice40_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_80_ice40_alu for cells of type $alu.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_80_ice40_alu for cells of type $alu.
Using template $paramod$6f67705c43e5e94c02b6ebb52209ce5aa5ade4c1\_80_ice40_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_80_ice40_alu for cells of type $alu.
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_80_ice40_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_80_ice40_alu for cells of type $alu.
Using template $paramod$fa8d9e4c2749d63ae521a69564d54ead1ad1232d\_80_ice40_alu for cells of type $alu.
Using template $paramod$49641a5ace7a8dbedd31c417f5a1b54fcecf6c7d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$21b43a343f2bc4ba62df8a2c90631d371d8e7ce8\_80_ice40_alu for cells of type $alu.
Using template $paramod$8ffc13f158d9c4b92f6c17114e5b147ae5ead21a\_80_ice40_alu for cells of type $alu.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_80_ice40_alu for cells of type $alu.
Using template $paramod$c6885379b74fbbf6906b35106e386e521d86cbb2\_80_ice40_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_80_ice40_alu for cells of type $alu.
Using template $paramod$04f121e3c8858ac36578330193fd248b9a31e99c\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using template $paramod$b016129edba87ad27a7393da6fa50baa1808cfd8\_80_ice40_alu for cells of type $alu.
Using template $paramod$b2626aff51a34e60b9c57dceb41667aaf5650a38\_80_ice40_alu for cells of type $alu.
Using template $paramod$8d7f98f10ed0231647041eea72c2a8a293a33560\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using template $paramod$a2af9b43308e3114c3b5dd3f4dc3329b2387395d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~1549 debug messages>

3.33. Executing OPT pass (performing simple optimizations).

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2601 debug messages>

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~2640 debug messages>
Removed a total of 880 cells.

3.33.3. Executing OPT_DFF pass (perform DFF optimizations).

3.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 85 unused cells and 1738 unused wires.
<suppressed ~86 debug messages>

3.33.5. Finished fast OPT passes.

3.34. Executing ICE40_OPT pass (performing simple optimizations).

3.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1777.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1782.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1787.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1792.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1792.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1803.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1792.BB [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1814.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1792.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1835.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1792.BB [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1846.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1846.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1857.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1846.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1868.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1879.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[0].carry: CO=\vga.count_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1895.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1911.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1846.BB [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1922.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1922.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1927.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1938.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1956.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1792.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1972.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2003.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1792.BB [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2038.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1846.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2051.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2064.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2077.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2086.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2099.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2112.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2121.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2134.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1868.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2156.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2156.slice[8].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2159.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2162.slice[0].carry: CO=\vga.ball_pos_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2162.slice[9].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2165.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2168.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1947.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2173.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2173.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2176.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1938.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2184.slice[0].carry: CO=\vga.interval_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2190.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2193.slice[0].carry: CO=\vga.score_r [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2196.slice[0].carry: CO=\vga.ball_angle [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2199.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2202.slice[0].carry: CO=\vga.ball_ratio [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2205.slice[0].carry: CO=\vga.score_l [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2208.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2211.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2211.slice[8].carry: CO=$auto$alumacc.cc:485:replace_alu$2211.C [8]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2214.slice[0].carry: CO=\vga.ball_pos_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2214.slice[9].carry: CO=$auto$alumacc.cc:485:replace_alu$2214.C [9]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2217.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$2217.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2220.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2220.slice[7].carry: CO=$auto$alumacc.cc:485:replace_alu$2220.C [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2223.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$2223.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2226.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2226.slice[7].carry: CO=$auto$alumacc.cc:485:replace_alu$2226.C [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2229.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$2229.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2232.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2235.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2238.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2241.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2244.slice[0].carry: CO=\rst_counter [0]

3.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~16 debug messages>

3.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~618 debug messages>
Removed a total of 206 cells.

3.34.4. Executing OPT_DFF pass (perform DFF optimizations).

3.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 16 unused cells and 14 unused wires.
<suppressed ~17 debug messages>

3.34.6. Rerunning OPT passes. (Removed registers in this run.)

3.34.7. Running ICE40 specific optimizations.

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.34.10. Executing OPT_DFF pass (perform DFF optimizations).

3.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.34.12. Finished OPT passes. (There is nothing left to do.)

3.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.36.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
No more expansions possible.
<suppressed ~167 debug messages>

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1787.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2156.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2156.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2159.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2162.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2162.slice[9].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2165.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2173.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2173.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2181.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2181.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2184.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2187.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2190.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2193.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2196.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2199.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2202.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2205.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2208.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2211.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2211.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2214.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2214.slice[9].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2217.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2217.slice[11].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2220.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2220.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2223.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2226.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2226.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2229.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2229.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2241.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2244.slice[0].carry ($lut).

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~552 debug messages>

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~258 debug messages>
Removed a total of 86 cells.

3.39.4. Executing OPT_DFF pass (perform DFF optimizations).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 8 unused cells and 980 unused wires.
<suppressed ~9 debug messages>

3.39.6. Rerunning OPT passes. (Removed registers in this run.)

3.39.7. Running ICE40 specific optimizations.

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

3.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.10. Executing OPT_DFF pass (perform DFF optimizations).

3.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.12. Rerunning OPT passes. (Removed registers in this run.)

3.39.13. Running ICE40 specific optimizations.

3.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.16. Executing OPT_DFF pass (perform DFF optimizations).

3.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.18. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.41. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

3.42. Executing ABC9 pass.

3.42.1. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.2. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

3.42.4. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.5. Executing PROC pass (convert processes to netlists).

3.42.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.42.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.42.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.42.5.4. Executing PROC_INIT pass (extract init attributes).

3.42.5.5. Executing PROC_ARST pass (detect async resets in processes).

3.42.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.42.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.42.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.42.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.42.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.42.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.42.5.12. Executing OPT_EXPR pass (perform const folding).

3.42.6. Executing TECHMAP pass (map to technology primitives).

3.42.6.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~126 debug messages>

3.42.7. Executing OPT pass (performing simple optimizations).

3.42.7.1. Executing OPT_EXPR pass (perform const folding).

3.42.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

3.42.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

3.42.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

3.42.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

3.42.7.6. Executing OPT_DFF pass (perform DFF optimizations).

3.42.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

3.42.7.8. Executing OPT_EXPR pass (perform const folding).

3.42.7.9. Finished OPT passes. (There is nothing left to do.)

3.42.8. Executing TECHMAP pass (map to technology primitives).

3.42.8.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

3.42.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

3.42.9. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_model.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

3.42.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~263 debug messages>

3.42.11. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

3.42.13. Executing TECHMAP pass (map to technology primitives).

3.42.13.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template SB_CARRY for cells of type SB_CARRY.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
No more expansions possible.
<suppressed ~147 debug messages>

3.42.14. Executing OPT pass (performing simple optimizations).

3.42.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

3.42.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

3.42.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.42.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.42.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.42.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.42.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

3.42.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.42.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.42.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.42.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.42.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.42.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.42.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.42.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.42.14.16. Finished OPT passes. (There is nothing left to do.)

3.42.15. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

3.42.16. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 667 cells with 3668 new cells, skipped 1733 cells.
  replaced 4 cell types:
     332 $_OR_
      73 $_XOR_
       1 $_ANDNOT_
     261 $_MUX_
  not replaced 12 cell types:
     273 $_NOT_
     310 $_AND_
       1 SB_DFF
      28 SB_DFFE
      48 SB_DFFSR
      10 SB_DFFSS
      16 SB_DFFESR
      42 SB_DFFESS
       1 SB_PLL40_PAD
     116 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011001011
     743 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
     145 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000000010101

3.42.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.16.3. Executing XAIGER backend.
<suppressed ~156 debug messages>
Extracted 1645 AND gates and 6264 wires from module `top' to a netlist network with 156 inputs and 292 outputs.

3.42.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

3.42.16.5. Executing ABC9.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    156/    292  and =    1551  lev =   18 (0.32)  mem = 0.11 MB  box = 1004  bb = 261
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    156/    292  and =    1478  lev =   19 (0.27)  mem = 0.11 MB  ch =  176  box = 995  bb = 261
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    1478.  Ch =   147.  Total mem =    1.04 MB. Peak cut mem =    0.03 MB.
ABC: P:  Del = 6446.00.  Ar =     432.0.  Edge =     1496.  Cut =     7362.  T =     0.00 sec
ABC: P:  Del = 6446.00.  Ar =     428.0.  Edge =     1513.  Cut =     7083.  T =     0.00 sec
ABC: P:  Del = 6446.00.  Ar =     391.0.  Edge =     1266.  Cut =     7550.  T =     0.00 sec
ABC: F:  Del = 6446.00.  Ar =     372.0.  Edge =     1218.  Cut =     7451.  T =     0.00 sec
ABC: A:  Del = 6446.00.  Ar =     363.0.  Edge =     1173.  Cut =     7548.  T =     0.00 sec
ABC: A:  Del = 6446.00.  Ar =     362.0.  Edge =     1172.  Cut =     7537.  T =     0.00 sec
ABC: Total time =     0.01 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    156/    292  and =     856  lev =   21 (0.31)  mem = 0.10 MB  box = 957  bb = 261
ABC: Mapping (K=4)  :  lut =    331  edge =    1046  lev =    9 (0.18)  levB =   36  mem = 0.03 MB
ABC: LUT = 331 : 2=96 29.0 %  3=86 26.0 %  4=149 45.0 %  Ave = 3.16
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.15 seconds, total: 0.15 seconds

3.42.16.6. Executing AIGER frontend.
<suppressed ~955 debug messages>
Removed 1057 unused cells and 6891 unused wires.

3.42.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:      473
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:      696
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:      292
Removing temp directory.

3.42.17. Executing TECHMAP pass (map to technology primitives).

3.42.17.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

3.42.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
No more expansions possible.
<suppressed ~702 debug messages>

3.43. Executing ICE40_WRAPCARRY pass (wrap carries).

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 579 unused cells and 10654 unused wires.

3.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      662
  1-LUT              142
  2-LUT              116
  3-LUT              254
  4-LUT              150
  with \SB_CARRY    (#0)  177
  with \SB_CARRY    (#1)  188

Eliminating LUTs.
Number of LUTs:      662
  1-LUT              142
  2-LUT              116
  3-LUT              254
  4-LUT              150
  with \SB_CARRY    (#0)  177
  with \SB_CARRY    (#1)  188

Combining LUTs.
Number of LUTs:      576
  1-LUT               86
  2-LUT               81
  3-LUT              236
  4-LUT              173
  with \SB_CARRY    (#0)  177
  with \SB_CARRY    (#1)  188

Eliminated 0 LUTs.
Combined 86 LUTs.
<suppressed ~5153 debug messages>

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template $paramod$2d07c1a6c53c7b878509360922c4fa5ebedc3011\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod$a59507d273cd827eb6c46c37820d50a1b717efdf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$99d83c3a805aa9e9a8582ae82a1636e49ca1dc3c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001100 for cells of type $lut.
Using template $paramod$64b84593fae19d6c4d7d26333a195e5cc6b30160\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$7991e43c533565df3969b82a304afcde859daeba\$lut for cells of type $lut.
Using template $paramod$359fe4e746656bf9c72aecaff84fc7bdea9f55a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11011000 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$94ac66a11090dca84889e55fcf03297912a5b7ec\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101010 for cells of type $lut.
Using template $paramod$cc0ecf62181c0c3f40b327a3ace6ad59971531bd\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101100 for cells of type $lut.
Using template $paramod$468a70be730014d0c6e821be1fc5e5264e8b9a73\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101000 for cells of type $lut.
Using template $paramod$9d707d218adbd63b6f9a0c79d7ee037306fb6296\$lut for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$110856bf697c7a158dbc358990e269a0288aaec9\$lut for cells of type $lut.
Using template $paramod$782cd8e479095864b1543a893e78f5ca3d9a3084\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$ab8bb87959c5d7cfa27886cee1355b38e054a61a\$lut for cells of type $lut.
Using template $paramod$7d813eb49700f971f2635a434700eafdfa816bc3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod$0ae7705354ab4bfd071e2551e0df024a40a698f7\$lut for cells of type $lut.
Using template $paramod$aef23e15e3277ce4ab125c45258c5a8ba83d6ccd\$lut for cells of type $lut.
Using template $paramod$f8f63b209b7230e81958663ff24fef1613156af7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$5ec977bb474dfb10d7fe04be7a11f9b41374c803\$lut for cells of type $lut.
Using template $paramod$8d3ce9be81cff69f90f3cfd65305257300b4cb85\$lut for cells of type $lut.
Using template $paramod$024f437069ede126a08cbaf2540201977a378569\$lut for cells of type $lut.
Using template $paramod$ad20004ca4cc55e015f230a7d22fd8b3bc00587e\$lut for cells of type $lut.
Using template $paramod$2b29ccbd5fb8b9c557f92ddec1023c75686f32ae\$lut for cells of type $lut.
Using template $paramod$1b6589a5b00bbad8e5635e71249e07e10bfc1308\$lut for cells of type $lut.
Using template $paramod$b8c12e9f20286ec99dd92b2fd58c920f7e7cec0f\$lut for cells of type $lut.
Using template $paramod$9888082d13c544afa98b0a3109ddbbdba5c4f025\$lut for cells of type $lut.
Using template $paramod$b4c8cb4248d7bfd47d1fb0d3a76bb28bd0da9492\$lut for cells of type $lut.
Using template $paramod$3ae9f1cda205b669870c653a21d45eee50078e98\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100111 for cells of type $lut.
Using template $paramod$c97e738df958f490eb8461efe944668c310ecac5\$lut for cells of type $lut.
Using template $paramod$f6c83049b9d7384ff2fab985b47f7bfd78c4d525\$lut for cells of type $lut.
Using template $paramod$253532b742d151c01e8e51f153c24d934b8f6185\$lut for cells of type $lut.
Using template $paramod$d7856980c8e3df62f97c26ab34037f33a9e831b5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001110 for cells of type $lut.
Using template $paramod$df6b12cebabc3b2db650658c5e894d03a346e968\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1101 for cells of type $lut.
Using template $paramod$18c516c6782c4e206d47edaaacaa5becd5ddee70\$lut for cells of type $lut.
Using template $paramod$873c285bdccf0ac2b60d2304ea5cd14bf211d2a6\$lut for cells of type $lut.
Using template $paramod$a9579ee6945670e687aa63d8d55dd4cf839ae00c\$lut for cells of type $lut.
Using template $paramod$edc5a73130589b9210f4bdf92e14bdcacac8945d\$lut for cells of type $lut.
Using template $paramod$0b3dae0cf9ba4ff0f31b6a740f162807f52296cf\$lut for cells of type $lut.
Using template $paramod$c28a8b7ce0535d090c4cfb52e9c74affd52b110c\$lut for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$044e8b1893c94f717651c5cd428e71c892566f52\$lut for cells of type $lut.
Using template $paramod$66f4e42f6ecc06064dc14df2d3ed673c4ae6d667\$lut for cells of type $lut.
Using template $paramod$9c65fdfac74256c2eb67dd209b598e25d1f0a099\$lut for cells of type $lut.
Using template $paramod$8494168726d27c2200605afcf1fb7470bf987857\$lut for cells of type $lut.
Using template $paramod$8f0687b3b1e843d1af48a2820ee1e560d6b66240\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$ba38eeec612c623fb7e710aa4d96a3562d261f4e\$lut for cells of type $lut.
Using template $paramod$5e9374f44a27c3f8a1c38af244ec43ceb4fb8d4f\$lut for cells of type $lut.
Using template $paramod$101238f3d8d49ab12a9b49a2f01cd503b26e9c61\$lut for cells of type $lut.
Using template $paramod$30305e55a780880b9c824fe3509a4d981acb0f2b\$lut for cells of type $lut.
Using template $paramod$e51a8a571bee774247b38f52d6e85fd62ae52cea\$lut for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001000 for cells of type $lut.
Using template $paramod$47a8214374025465e226fa66bee690ff33268a25\$lut for cells of type $lut.
Using template $paramod$7ccb46ee9b56c39e0a7d82a185b08cb026e04fbc\$lut for cells of type $lut.
Using template $paramod$db08fd84fb3c4d6a41eaec6adfffe445fb7eb17f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$c693279d50e4f822d57edd09c4d5305ef4ffaea4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111010 for cells of type $lut.
Using template $paramod$ff10621ff350133ce54c2c9c3516ef034e8cfe58\$lut for cells of type $lut.
Using template $paramod$9afddf97a1bcdcd5623dd33ede64f1dbbcaf1bf0\$lut for cells of type $lut.
Using template $paramod$1632c1c0242796acfc963a05742c4acd2f475c4e\$lut for cells of type $lut.
Using template $paramod$9e394303e290a474880b56f98766417009256d93\$lut for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$3931ba8c767dbe4f52667f0abe066ad18c30e22b\$lut for cells of type $lut.
Using template $paramod$cdc190b0ebd2871fd44da321a09eaaa34dbc9dac\$lut for cells of type $lut.
Using template $paramod$e6dfffc8b1c22ea11095f018046e1ca64d8b4e42\$lut for cells of type $lut.
Using template $paramod$ab2e45f7a350a5d7d54d88d8019d5256ae32568f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$149ba24726e8ed79d2a56af0a14dde8784b95345\$lut for cells of type $lut.
Using template $paramod$b4f15f202f50520dbc381cd0880ac94f830f05a8\$lut for cells of type $lut.
Using template $paramod$2bf796e0fd6e6f7f76aac424a34e617ed5d61822\$lut for cells of type $lut.
Using template $paramod$7dc80f6db7113f8d3efb3affd3151d83c6b5c052\$lut for cells of type $lut.
Using template $paramod$364c9ffbffac467d60dfec81bba4e18476c15602\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100110 for cells of type $lut.
Using template $paramod$a7d9b4ab0321c8125e5b895183ee6b84cdb4a31b\$lut for cells of type $lut.
Using template $paramod$c217e185eb8e6463ca272982ba8c5940fa90d81f\$lut for cells of type $lut.
Using template $paramod$70ebb6cf5bc7d63c5c1a98ccefefa2af79e8f2a9\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2165 debug messages>
Removed 0 unused cells and 1350 unused wires.

3.47. Executing AUTONAME pass.
Renamed 31140 objects in module top (114 iterations).
<suppressed ~2540 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \top

3.48.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.49. Printing statistics.

=== top ===

   Number of wires:               1250
   Number of wire bits:           1847
   Number of public wires:        1250
   Number of public wire bits:    1847
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1398
     SB_CARRY                      676
     SB_DFF                          1
     SB_DFFE                        28
     SB_DFFESR                      16
     SB_DFFESS                      42
     SB_DFFSR                       48
     SB_DFFSS                       10
     SB_LUT4                       576
     SB_PLL40_PAD                    1

3.50. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.51. Executing JSON backend.

End of script. Logfile hash: 15260fe3a0, CPU: user 1.82s system 0.02s, MEM: 46.53 MB peak
Yosys 0.38+4 (git sha1 ac0fb2e30, clang 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 18% 31x opt_expr (0 sec), 17% 23x read_verilog (0 sec), ...
