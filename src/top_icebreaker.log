
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38+4 (git sha1 ac0fb2e30, clang 14.0.0-1ubuntu1.1 -fPIC -Os)


-- Parsing `top_icebreaker.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top_icebreaker.v
Parsing Verilog input from `top_icebreaker.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Parsing `vga.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: vga.v
Parsing Verilog input from `vga.v' to AST representation.
Storing AST representation for module `$abstract\vga'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json top_icebreaker.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\vga'.
Generating RTLIL representation for module `\vga'.

3.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga

3.3.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga
Removing unused module `$abstract\vga'.
Removing unused module `$abstract\top'.
Removed 2 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 16 switch rules as full_case in process $proc$vga.v:477$535 in module vga.
Marked 14 switch rules as full_case in process $proc$vga.v:366$534 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:345$521 in module vga.
Marked 2 switch rules as full_case in process $proc$vga.v:300$490 in module vga.
Marked 12 switch rules as full_case in process $proc$vga.v:233$461 in module vga.
Marked 12 switch rules as full_case in process $proc$vga.v:166$422 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:131$411 in module vga.
Marked 1 switch rules as full_case in process $proc$top_icebreaker.v:100$397 in module top.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 23 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top_icebreaker.v:30$407'.
  Set init value: \rst_counter = 10'1111111111

3.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~95 debug messages>

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\vga.$proc$vga.v:477$535'.
     1/10: $0\ball_angle[3:0] [3]
     2/10: $0\ball_angle[3:0] [2:0]
     3/10: $0\score_r[2:0]
     4/10: $0\hide_l[0:0]
     5/10: $0\score_l[2:0]
     6/10: $0\hide_r[0:0]
     7/10: $0\ball_ratio[2:0]
     8/10: $0\ball_motion_l[0:0]
     9/10: $0\ball_pos_v[8:0]
    10/10: $0\ball_pos_h[9:0]
Creating decoders for process `\vga.$proc$vga.v:366$534'.
     1/2: $0\score_r_pixels[2:0]
     2/2: $0\score_l_pixels[2:0]
Creating decoders for process `\vga.$proc$vga.v:345$521'.
     1/2: $0\paddle_r_pos_v[8:0]
     2/2: $0\paddle_l_pos_v[8:0]
Creating decoders for process `\vga.$proc$vga.v:316$515'.
     1/8: $0\right_down_pressed[0:0]
     2/8: $0\right_up_pressed[0:0]
     3/8: $0\left_down_pressed[0:0]
     4/8: $0\left_up_pressed[0:0]
     5/8: $0\right_down_1d[0:0]
     6/8: $0\right_up_1d[0:0]
     7/8: $0\left_down_1d[0:0]
     8/8: $0\left_up_1d[0:0]
Creating decoders for process `\vga.$proc$vga.v:300$490'.
     1/1: $0\interval_counter[24:0]
Creating decoders for process `\vga.$proc$vga.v:233$461'.
     1/11: $0\vs_out[0:0]
     2/11: $0\count_v_score[0:0]
     3/11: $0\count_v_score_update_4[0:0]
     4/11: $0\count_v_score_update_3[0:0]
     5/11: $0\count_v_score_update_2[0:0]
     6/11: $0\count_v_score_update_1[0:0]
     7/11: $0\count_v_score_update_0[0:0]
     8/11: $0\count_v_paddle_r[0:0]
     9/11: $0\count_v_paddle_l[0:0]
    10/11: $0\count_v[9:0]
    11/11: $0\blank_v[0:0]
Creating decoders for process `\vga.$proc$vga.v:166$422'.
     1/12: $0\count_h[9:0]
     2/12: $0\count_h_score_r_2[0:0]
     3/12: $0\count_h_score_r_1[0:0]
     4/12: $0\count_h_score_r_0[0:0]
     5/12: $0\count_h_score_l_2[0:0]
     6/12: $0\count_h_score_l_1[0:0]
     7/12: $0\count_h_score_l_0[0:0]
     8/12: $0\count_h_paddle_r[0:0]
     9/12: $0\count_h_paddle_l[0:0]
    10/12: $0\count_h_ball[0:0]
    11/12: $0\hs_out[0:0]
    12/12: $0\blank_h[0:0]
Creating decoders for process `\vga.$proc$vga.v:131$411'.
     1/2: $0\grn[0:0]
     2/2: $0\red[0:0]
Creating decoders for process `\top.$proc$top_icebreaker.v:30$407'.
Creating decoders for process `\top.$proc$top_icebreaker.v:100$397'.
     1/2: $0\rst[0:0]
     2/2: $0\rst_counter[9:0]

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$1386' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$1387' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$1388' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$1389' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$1390' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$1391' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$1392' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$1393' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$1394' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$1395' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$1396' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$1397' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$1398' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$1399' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$1400' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$1401' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$1402' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$1403' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$1404' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$1405' with positive edge clock.
Creating register for signal `\vga.\ball_pos_h' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1406' with positive edge clock.
Creating register for signal `\vga.\ball_pos_v' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1407' with positive edge clock.
Creating register for signal `\vga.\ball_motion_l' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1408' with positive edge clock.
Creating register for signal `\vga.\ball_ratio' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1409' with positive edge clock.
Creating register for signal `\vga.\ball_angle' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1410' with positive edge clock.
Creating register for signal `\vga.\score_l' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1411' with positive edge clock.
Creating register for signal `\vga.\hide_l' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1412' with positive edge clock.
Creating register for signal `\vga.\score_r' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1413' with positive edge clock.
Creating register for signal `\vga.\hide_r' using process `\vga.$proc$vga.v:477$535'.
  created $dff cell `$procdff$1414' with positive edge clock.
Creating register for signal `\vga.\score_l_pixels' using process `\vga.$proc$vga.v:366$534'.
  created $dff cell `$procdff$1415' with positive edge clock.
Creating register for signal `\vga.\score_r_pixels' using process `\vga.$proc$vga.v:366$534'.
  created $dff cell `$procdff$1416' with positive edge clock.
Creating register for signal `\vga.\paddle_l_pos_v' using process `\vga.$proc$vga.v:345$521'.
  created $dff cell `$procdff$1417' with positive edge clock.
Creating register for signal `\vga.\paddle_r_pos_v' using process `\vga.$proc$vga.v:345$521'.
  created $dff cell `$procdff$1418' with positive edge clock.
Creating register for signal `\vga.\left_up_1d' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1419' with positive edge clock.
Creating register for signal `\vga.\left_down_1d' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1420' with positive edge clock.
Creating register for signal `\vga.\right_up_1d' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1421' with positive edge clock.
Creating register for signal `\vga.\right_down_1d' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1422' with positive edge clock.
Creating register for signal `\vga.\left_up_pressed' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1423' with positive edge clock.
Creating register for signal `\vga.\left_down_pressed' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1424' with positive edge clock.
Creating register for signal `\vga.\right_up_pressed' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1425' with positive edge clock.
Creating register for signal `\vga.\right_down_pressed' using process `\vga.$proc$vga.v:316$515'.
  created $dff cell `$procdff$1426' with positive edge clock.
Creating register for signal `\vga.\interval_counter' using process `\vga.$proc$vga.v:300$490'.
  created $dff cell `$procdff$1427' with positive edge clock.
Creating register for signal `\vga.\blank_v' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1428' with positive edge clock.
Creating register for signal `\vga.\count_v' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1429' with positive edge clock.
Creating register for signal `\vga.\count_v_paddle_l' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1430' with positive edge clock.
Creating register for signal `\vga.\count_v_paddle_r' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1431' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_0' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1432' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_1' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1433' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_2' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1434' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_3' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1435' with positive edge clock.
Creating register for signal `\vga.\count_v_score_update_4' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1436' with positive edge clock.
Creating register for signal `\vga.\count_v_score' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1437' with positive edge clock.
Creating register for signal `\vga.\vs_out' using process `\vga.$proc$vga.v:233$461'.
  created $dff cell `$procdff$1438' with positive edge clock.
Creating register for signal `\vga.\blank_h' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1439' with positive edge clock.
Creating register for signal `\vga.\count_h' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1440' with positive edge clock.
Creating register for signal `\vga.\count_h_ball' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1441' with positive edge clock.
Creating register for signal `\vga.\count_h_paddle_l' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1442' with positive edge clock.
Creating register for signal `\vga.\count_h_paddle_r' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1443' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_0' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1444' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_1' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1445' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_2' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1446' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_0' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1447' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_1' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_2' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\vga.\hs_out' using process `\vga.$proc$vga.v:166$422'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\vga.\red' using process `\vga.$proc$vga.v:131$411'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\vga.\grn' using process `\vga.$proc$vga.v:131$411'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\top.\rst_counter' using process `\top.$proc$top_icebreaker.v:100$397'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top_icebreaker.v:100$397'.
  created $dff cell `$procdff$1454' with positive edge clock.

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 20 empty switches in `\vga.$proc$vga.v:477$535'.
Removing empty process `vga.$proc$vga.v:477$535'.
Found and cleaned up 15 empty switches in `\vga.$proc$vga.v:366$534'.
Removing empty process `vga.$proc$vga.v:366$534'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:345$521'.
Removing empty process `vga.$proc$vga.v:345$521'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:316$515'.
Removing empty process `vga.$proc$vga.v:316$515'.
Found and cleaned up 2 empty switches in `\vga.$proc$vga.v:300$490'.
Removing empty process `vga.$proc$vga.v:300$490'.
Found and cleaned up 13 empty switches in `\vga.$proc$vga.v:233$461'.
Removing empty process `vga.$proc$vga.v:233$461'.
Found and cleaned up 14 empty switches in `\vga.$proc$vga.v:166$422'.
Removing empty process `vga.$proc$vga.v:166$422'.
Found and cleaned up 1 empty switch in `\vga.$proc$vga.v:131$411'.
Removing empty process `vga.$proc$vga.v:131$411'.
Removing empty process `top.$proc$top_icebreaker.v:30$407'.
Found and cleaned up 2 empty switches in `\top.$proc$top_icebreaker.v:100$397'.
Removing empty process `top.$proc$top_icebreaker.v:100$397'.
Cleaned up 95 empty switches.

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga.
<suppressed ~28 debug messages>
Optimizing module top.
<suppressed ~9 debug messages>

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module vga.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~10 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 439 unused cells and 778 unused wires.
<suppressed ~486 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1453 ($dff) from module top (D = $sub$top_icebreaker.v:104$399_Y [9:0], Q = \rst_counter).
Adding SRST signal on $flatten\vga.$procdff$1451 ($dff) from module top (D = $flatten\vga.$ternary$vga.v:163$420_Y, Q = \vga.red, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1450 ($dff) from module top (D = $flatten\vga.$procmux$1346_Y, Q = \vga.hs_out, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1440 ($dff) from module top (D = $flatten\vga.$procmux$1177_Y, Q = \vga.count_h, rval = 10'1111111111).
Adding SRST signal on $flatten\vga.$procdff$1439 ($dff) from module top (D = $flatten\vga.$procmux$1367_Y, Q = \vga.blank_h, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1465 ($sdff) from module top (D = $flatten\vga.$procmux$1364_Y, Q = \vga.blank_h).
Adding SRST signal on $flatten\vga.$procdff$1438 ($dff) from module top (D = $flatten\vga.$procmux$1052_Y, Q = \vga.vs_out, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1475 ($sdff) from module top (D = $flatten\vga.$procmux$1045_Y, Q = \vga.vs_out).
Adding SRST signal on $flatten\vga.$procdff$1429 ($dff) from module top (D = $flatten\vga.$procmux$1151_Y, Q = \vga.count_v, rval = 10'0111111111).
Adding EN signal on $auto$ff.cc:266:slice$1481 ($sdff) from module top (D = $flatten\vga.$procmux$1149_Y, Q = \vga.count_v).
Adding SRST signal on $flatten\vga.$procdff$1428 ($dff) from module top (D = $flatten\vga.$procmux$1162_Y, Q = \vga.blank_v, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1483 ($sdff) from module top (D = $flatten\vga.$procmux$1157_Y, Q = \vga.blank_v).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 19 unused cells and 19 unused wires.
<suppressed ~21 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$sub$top_icebreaker.v:104$399 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$sub$top_icebreaker.v:104$399 ($sub).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1468 ($ne).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:287$488 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:287$487 ($gt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:284$485 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:241$464 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:241$464 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:239$463 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:238$462 ($ge).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1470 ($ne).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:223$459 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:219$457 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:215$455 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:182$424 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:182$424 ($add).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:180$423 ($lt).
Removed top 1 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:163$417 ($eq).
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:182$424_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:241$464_Y.
Removed top 22 bits (of 32) from wire top.$sub$top_icebreaker.v:104$399_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~244 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\vga.$add$vga.v:182$424 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:241$464 ($add).
  creating $macc model for $sub$top_icebreaker.v:104$399 ($sub).
  creating $alu model for $macc $sub$top_icebreaker.v:104$399.
  creating $alu model for $macc $flatten\vga.$add$vga.v:241$464.
  creating $alu model for $macc $flatten\vga.$add$vga.v:182$424.
  creating $alu model for $flatten\vga.$ge$vga.v:238$462 ($ge): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:287$487 ($gt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:180$423 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:215$455 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:219$457 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:223$459 ($lt): merged with $flatten\vga.$ge$vga.v:238$462.
  creating $alu model for $flatten\vga.$lt$vga.v:239$463 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:284$485 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:287$488 ($lt): new $alu
  creating $alu model for $flatten\vga.$eq$vga.v:163$414 ($eq): merged with $flatten\vga.$lt$vga.v:180$423.
  creating $alu model for $flatten\vga.$eq$vga.v:163$417 ($eq): merged with $flatten\vga.$lt$vga.v:239$463.
  creating $alu cell for $flatten\vga.$lt$vga.v:287$488: $auto$alumacc.cc:485:replace_alu$1501
  creating $alu cell for $flatten\vga.$lt$vga.v:284$485: $auto$alumacc.cc:485:replace_alu$1512
  creating $alu cell for $flatten\vga.$lt$vga.v:239$463, $flatten\vga.$eq$vga.v:163$417: $auto$alumacc.cc:485:replace_alu$1523
  creating $alu cell for $flatten\vga.$lt$vga.v:219$457: $auto$alumacc.cc:485:replace_alu$1534
  creating $alu cell for $flatten\vga.$lt$vga.v:215$455: $auto$alumacc.cc:485:replace_alu$1545
  creating $alu cell for $flatten\vga.$lt$vga.v:180$423, $flatten\vga.$eq$vga.v:163$414: $auto$alumacc.cc:485:replace_alu$1556
  creating $alu cell for $flatten\vga.$gt$vga.v:287$487: $auto$alumacc.cc:485:replace_alu$1567
  creating $alu cell for $flatten\vga.$ge$vga.v:238$462, $flatten\vga.$lt$vga.v:223$459: $auto$alumacc.cc:485:replace_alu$1572
  creating $alu cell for $flatten\vga.$add$vga.v:182$424: $auto$alumacc.cc:485:replace_alu$1585
  creating $alu cell for $flatten\vga.$add$vga.v:241$464: $auto$alumacc.cc:485:replace_alu$1588
  creating $alu cell for $sub$top_icebreaker.v:104$399: $auto$alumacc.cc:485:replace_alu$1591
  created 11 $alu and 0 $macc cells.

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~13 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.6. Executing OPT_DFF pass (perform DFF optimizations).

3.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 14 unused wires.
<suppressed ~2 debug messages>

3.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.9. Rerunning OPT passes. (Maybe there is more to do..)

3.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.13. Executing OPT_DFF pass (perform DFF optimizations).

3.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.16. Finished OPT passes. (There is nothing left to do.)

3.23. Executing MEMORY pass.

3.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

3.26. Executing TECHMAP pass (map to technology primitives).

3.26.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.26.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.27. Executing ICE40_BRAMINIT pass.

3.28. Executing OPT pass (performing simple optimizations).

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~12 debug messages>

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 12 unused cells and 35 unused wires.
<suppressed ~13 debug messages>

3.28.5. Finished fast OPT passes.

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.9. Finished OPT passes. (There is nothing left to do.)

3.31. Executing ICE40_WRAPCARRY pass (wrap carries).

3.32. Executing TECHMAP pass (map to technology primitives).

3.32.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.32.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $or.
Using template $paramod$49641a5ace7a8dbedd31c417f5a1b54fcecf6c7d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_80_ice40_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_80_ice40_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~361 debug messages>

3.33. Executing OPT pass (performing simple optimizations).

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~201 debug messages>

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~201 debug messages>
Removed a total of 67 cells.

3.33.3. Executing OPT_DFF pass (perform DFF optimizations).

3.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 14 unused cells and 236 unused wires.
<suppressed ~15 debug messages>

3.33.5. Finished fast OPT passes.

3.34. Executing ICE40_OPT pass (performing simple optimizations).

3.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1501.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1501.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1512.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1501.BB [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1523.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1501.BB [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1534.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1534.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1545.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1534.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1556.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1534.BB [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1567.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1501.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1572.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1534.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1585.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1588.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1591.slice[0].carry: CO=\rst_counter [0]

3.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.34.4. Executing OPT_DFF pass (perform DFF optimizations).

3.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 7 unused cells and 0 unused wires.
<suppressed ~7 debug messages>

3.34.6. Rerunning OPT passes. (Removed registers in this run.)

3.34.7. Running ICE40 specific optimizations.

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.34.10. Executing OPT_DFF pass (perform DFF optimizations).

3.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.34.12. Finished OPT passes. (There is nothing left to do.)

3.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.36.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~58 debug messages>

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1585.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1588.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1591.slice[0].carry ($lut).

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~45 debug messages>

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

3.39.4. Executing OPT_DFF pass (perform DFF optimizations).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 215 unused wires.
<suppressed ~1 debug messages>

3.39.6. Rerunning OPT passes. (Removed registers in this run.)

3.39.7. Running ICE40 specific optimizations.

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.10. Executing OPT_DFF pass (perform DFF optimizations).

3.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.12. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.41. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

3.42. Executing ABC9 pass.

3.42.1. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.2. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

3.42.4. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.5. Executing PROC pass (convert processes to netlists).

3.42.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.42.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.42.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.42.5.4. Executing PROC_INIT pass (extract init attributes).

3.42.5.5. Executing PROC_ARST pass (detect async resets in processes).

3.42.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.42.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.42.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.42.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.42.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.42.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.42.5.12. Executing OPT_EXPR pass (perform const folding).

3.42.6. Executing TECHMAP pass (map to technology primitives).

3.42.6.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~126 debug messages>

3.42.7. Executing OPT pass (performing simple optimizations).

3.42.7.1. Executing OPT_EXPR pass (perform const folding).

3.42.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

3.42.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

3.42.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

3.42.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

3.42.7.6. Executing OPT_DFF pass (perform DFF optimizations).

3.42.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

3.42.7.8. Executing OPT_EXPR pass (perform const folding).

3.42.7.9. Finished OPT passes. (There is nothing left to do.)

3.42.8. Executing TECHMAP pass (map to technology primitives).

3.42.8.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

3.42.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

3.42.9. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_model.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

3.42.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~63 debug messages>

3.42.11. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

3.42.13. Executing TECHMAP pass (map to technology primitives).

3.42.13.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.42.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~147 debug messages>

3.42.14. Executing OPT pass (performing simple optimizations).

3.42.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

3.42.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

3.42.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.42.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.42.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.42.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.42.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

3.42.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.42.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.42.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.42.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.42.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.42.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.42.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.42.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.42.14.16. Finished OPT passes. (There is nothing left to do.)

3.42.15. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

3.42.16. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 112 cells with 640 new cells, skipped 280 cells.
  replaced 2 cell types:
      48 $_OR_
      64 $_MUX_
  not replaced 12 cell types:
      54 $_NOT_
      59 $_AND_
       1 SB_DFF
      10 SB_DFFE
       2 SB_DFFSR
      10 SB_DFFSS
       2 SB_DFFESR
      11 SB_DFFESS
       1 SB_PLL40_PAD
      69 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
      36 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000000010101
      25 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011001011

3.42.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

3.42.16.3. Executing XAIGER backend.
<suppressed ~47 debug messages>
Extracted 299 AND gates and 1042 wires from module `top' to a netlist network with 47 inputs and 83 outputs.

3.42.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

3.42.16.5. Executing ABC9.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     47/     83  and =     250  lev =   12 (0.60)  mem = 0.02 MB  box = 130  bb = 61
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     47/     83  and =     174  lev =    9 (0.43)  mem = 0.01 MB  ch =   21  box = 130  bb = 61
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =     174.  Ch =    20.  Total mem =    0.12 MB. Peak cut mem =    0.01 MB.
ABC: P:  Del = 3101.00.  Ar =      74.0.  Edge =      247.  Cut =      685.  T =     0.00 sec
ABC: P:  Del = 3101.00.  Ar =      72.0.  Edge =      244.  Cut =      655.  T =     0.00 sec
ABC: P:  Del = 3101.00.  Ar =      65.0.  Edge =      196.  Cut =      707.  T =     0.00 sec
ABC: F:  Del = 3101.00.  Ar =      64.0.  Edge =      195.  Cut =      582.  T =     0.00 sec
ABC: A:  Del = 3101.00.  Ar =      62.0.  Edge =      182.  Cut =      586.  T =     0.00 sec
ABC: A:  Del = 3101.00.  Ar =      62.0.  Edge =      182.  Cut =      583.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     47/     83  and =     111  lev =    8 (0.42)  mem = 0.01 MB  box = 125  bb = 61
ABC: Mapping (K=4)  :  lut =     60  edge =     167  lev =    4 (0.28)  levB =   11  mem = 0.00 MB
ABC: LUT = 60 : 2=29 48.3 %  3=15 25.0 %  4=16 26.7 %  Ave = 2.78
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.01 seconds, total: 0.01 seconds

3.42.16.6. Executing AIGER frontend.
<suppressed ~277 debug messages>
Removed 89 unused cells and 781 unused wires.

3.42.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       97
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:       64
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       83
Removing temp directory.

3.42.17. Executing TECHMAP pass (map to technology primitives).

3.42.17.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

3.42.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
No more expansions possible.
<suppressed ~70 debug messages>

3.43. Executing ICE40_WRAPCARRY pass (wrap carries).

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 49 unused cells and 1458 unused wires.

3.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      124
  1-LUT               37
  2-LUT               32
  3-LUT               39
  4-LUT               16
  with \SB_CARRY    (#0)   24
  with \SB_CARRY    (#1)   26

Eliminating LUTs.
Number of LUTs:      124
  1-LUT               37
  2-LUT               32
  3-LUT               39
  4-LUT               16
  with \SB_CARRY    (#0)   24
  with \SB_CARRY    (#1)   26

Combining LUTs.
Number of LUTs:       96
  1-LUT               27
  2-LUT               13
  3-LUT               23
  4-LUT               33
  with \SB_CARRY    (#0)   24
  with \SB_CARRY    (#1)   26

Eliminated 0 LUTs.
Combined 28 LUTs.
<suppressed ~762 debug messages>

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite-linux-x64-20240211/lib/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110101 for cells of type $lut.
Using template $paramod$9d707d218adbd63b6f9a0c79d7ee037306fb6296\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11011000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$990f0fb2b3d003f8b16e47a6e2203c03f05c2581\$lut for cells of type $lut.
Using template $paramod$c671781a895b5f708706649ad3da8c3a2570f157\$lut for cells of type $lut.
Using template $paramod$27331a24b2c1dcbe1b3eefac456a3f892f3b23d2\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101011 for cells of type $lut.
No more expansions possible.
<suppressed ~502 debug messages>
Removed 0 unused cells and 230 unused wires.

3.47. Executing AUTONAME pass.
Renamed 1387 objects in module top (29 iterations).
<suppressed ~343 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \top

3.48.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.49. Printing statistics.

=== top ===

   Number of wires:                218
   Number of wire bits:            314
   Number of public wires:         218
   Number of public wire bits:     314
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                194
     SB_CARRY                       61
     SB_DFF                          1
     SB_DFFE                        10
     SB_DFFESR                       2
     SB_DFFESS                      11
     SB_DFFSR                        2
     SB_DFFSS                       10
     SB_LUT4                        96
     SB_PLL40_PAD                    1

3.50. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.51. Executing JSON backend.

End of script. Logfile hash: a12e3f536c, CPU: user 0.68s system 0.01s, MEM: 30.91 MB peak
Yosys 0.38+4 (git sha1 ac0fb2e30, clang 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 49% 23x read_verilog (0 sec), 9% 28x opt_expr (0 sec), ...
