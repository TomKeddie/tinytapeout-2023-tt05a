
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+22 (git sha1 53c0a6b78, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `top_icebreaker.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top_icebreaker.v
Parsing Verilog input from `top_icebreaker.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Parsing `vga.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: vga.v
Parsing Verilog input from `vga.v' to AST representation.
Storing AST representation for module `$abstract\vga'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json top_icebreaker.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\vga'.
Generating RTLIL representation for module `\vga'.

3.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga

3.3.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga
Removing unused module `$abstract\vga'.
Removing unused module `$abstract\top'.
Removed 2 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 16 switch rules as full_case in process $proc$vga.v:469$567 in module vga.
Marked 14 switch rules as full_case in process $proc$vga.v:358$566 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:337$553 in module vga.
Marked 2 switch rules as full_case in process $proc$vga.v:292$522 in module vga.
Marked 11 switch rules as full_case in process $proc$vga.v:230$496 in module vga.
Marked 12 switch rules as full_case in process $proc$vga.v:163$457 in module vga.
Marked 1 switch rules as full_case in process $proc$vga.v:130$395 in module vga.
Marked 1 switch rules as full_case in process $proc$top_icebreaker.v:65$381 in module top.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 23 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top_icebreaker.v:29$391'.
  Set init value: \rst_counter = 10'1111111111

3.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~94 debug messages>

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\vga.$proc$vga.v:469$567'.
     1/10: $0\ball_angle[3:0] [3]
     2/10: $0\ball_angle[3:0] [2:0]
     3/10: $0\score_r[2:0]
     4/10: $0\hide_l[0:0]
     5/10: $0\score_l[2:0]
     6/10: $0\hide_r[0:0]
     7/10: $0\ball_ratio[2:0]
     8/10: $0\ball_motion_l[0:0]
     9/10: $0\ball_pos_v[8:0]
    10/10: $0\ball_pos_h[9:0]
Creating decoders for process `\vga.$proc$vga.v:358$566'.
     1/2: $0\score_r_pixels[2:0]
     2/2: $0\score_l_pixels[2:0]
Creating decoders for process `\vga.$proc$vga.v:337$553'.
     1/2: $0\paddle_r_pos_v[8:0]
     2/2: $0\paddle_l_pos_v[8:0]
Creating decoders for process `\vga.$proc$vga.v:308$547'.
     1/8: $0\right_down_pressed[0:0]
     2/8: $0\right_up_pressed[0:0]
     3/8: $0\left_down_pressed[0:0]
     4/8: $0\left_up_pressed[0:0]
     5/8: $0\right_down_1d[0:0]
     6/8: $0\right_up_1d[0:0]
     7/8: $0\left_down_1d[0:0]
     8/8: $0\left_up_1d[0:0]
Creating decoders for process `\vga.$proc$vga.v:292$522'.
     1/1: $0\interval_counter[24:0]
Creating decoders for process `\vga.$proc$vga.v:230$496'.
     1/10: $0\vs_out[0:0]
     2/10: $0\count_v_score_4[0:0]
     3/10: $0\count_v_score_3[0:0]
     4/10: $0\count_v_score_2[0:0]
     5/10: $0\count_v_score_1[0:0]
     6/10: $0\count_v_score_0[0:0]
     7/10: $0\count_v_paddle_r[0:0]
     8/10: $0\count_v_paddle_l[0:0]
     9/10: $0\count_v[8:0]
    10/10: $0\blank_v[0:0]
Creating decoders for process `\vga.$proc$vga.v:163$457'.
     1/12: $0\count_h[9:0]
     2/12: $0\count_h_score_r_2[0:0]
     3/12: $0\count_h_score_r_1[0:0]
     4/12: $0\count_h_score_r_0[0:0]
     5/12: $0\count_h_score_l_2[0:0]
     6/12: $0\count_h_score_l_1[0:0]
     7/12: $0\count_h_score_l_0[0:0]
     8/12: $0\count_h_paddle_r[0:0]
     9/12: $0\count_h_paddle_l[0:0]
    10/12: $0\count_h_ball[0:0]
    11/12: $0\hs_out[0:0]
    12/12: $0\blank_h[0:0]
Creating decoders for process `\vga.$proc$vga.v:130$395'.
     1/2: $0\grn[0:0]
     2/2: $0\red[0:0]
Creating decoders for process `\top.$proc$top_icebreaker.v:29$391'.
Creating decoders for process `\top.$proc$top_icebreaker.v:65$381'.
     1/2: $0\rst[0:0]
     2/2: $0\rst_counter[9:0]

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$1407' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$1408' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$1409' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$1410' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$1411' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$1412' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$1413' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$1414' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$1415' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$1416' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$1417' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$1418' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$1419' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$1420' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$1421' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$1422' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$1423' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$1424' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$1425' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$1426' with positive edge clock.
Creating register for signal `\vga.\ball_pos_h' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1427' with positive edge clock.
Creating register for signal `\vga.\ball_pos_v' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1428' with positive edge clock.
Creating register for signal `\vga.\ball_motion_l' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1429' with positive edge clock.
Creating register for signal `\vga.\ball_ratio' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1430' with positive edge clock.
Creating register for signal `\vga.\ball_angle' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1431' with positive edge clock.
Creating register for signal `\vga.\score_l' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1432' with positive edge clock.
Creating register for signal `\vga.\hide_l' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1433' with positive edge clock.
Creating register for signal `\vga.\score_r' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1434' with positive edge clock.
Creating register for signal `\vga.\hide_r' using process `\vga.$proc$vga.v:469$567'.
  created $dff cell `$procdff$1435' with positive edge clock.
Creating register for signal `\vga.\score_l_pixels' using process `\vga.$proc$vga.v:358$566'.
  created $dff cell `$procdff$1436' with positive edge clock.
Creating register for signal `\vga.\score_r_pixels' using process `\vga.$proc$vga.v:358$566'.
  created $dff cell `$procdff$1437' with positive edge clock.
Creating register for signal `\vga.\paddle_l_pos_v' using process `\vga.$proc$vga.v:337$553'.
  created $dff cell `$procdff$1438' with positive edge clock.
Creating register for signal `\vga.\paddle_r_pos_v' using process `\vga.$proc$vga.v:337$553'.
  created $dff cell `$procdff$1439' with positive edge clock.
Creating register for signal `\vga.\left_up_1d' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1440' with positive edge clock.
Creating register for signal `\vga.\left_down_1d' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1441' with positive edge clock.
Creating register for signal `\vga.\right_up_1d' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1442' with positive edge clock.
Creating register for signal `\vga.\right_down_1d' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1443' with positive edge clock.
Creating register for signal `\vga.\left_up_pressed' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1444' with positive edge clock.
Creating register for signal `\vga.\left_down_pressed' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1445' with positive edge clock.
Creating register for signal `\vga.\right_up_pressed' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1446' with positive edge clock.
Creating register for signal `\vga.\right_down_pressed' using process `\vga.$proc$vga.v:308$547'.
  created $dff cell `$procdff$1447' with positive edge clock.
Creating register for signal `\vga.\interval_counter' using process `\vga.$proc$vga.v:292$522'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\vga.\blank_v' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\vga.\count_v' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\vga.\count_v_paddle_l' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\vga.\count_v_paddle_r' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\vga.\count_v_score_0' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\vga.\count_v_score_1' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1454' with positive edge clock.
Creating register for signal `\vga.\count_v_score_2' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\vga.\count_v_score_3' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1456' with positive edge clock.
Creating register for signal `\vga.\count_v_score_4' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\vga.\vs_out' using process `\vga.$proc$vga.v:230$496'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\vga.\blank_h' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1459' with positive edge clock.
Creating register for signal `\vga.\count_h' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1460' with positive edge clock.
Creating register for signal `\vga.\count_h_ball' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1461' with positive edge clock.
Creating register for signal `\vga.\count_h_paddle_l' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1462' with positive edge clock.
Creating register for signal `\vga.\count_h_paddle_r' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_0' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1464' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_1' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1465' with positive edge clock.
Creating register for signal `\vga.\count_h_score_l_2' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1466' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_0' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1467' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_1' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `\vga.\count_h_score_r_2' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\vga.\hs_out' using process `\vga.$proc$vga.v:163$457'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `\vga.\red' using process `\vga.$proc$vga.v:130$395'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `\vga.\grn' using process `\vga.$proc$vga.v:130$395'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `\top.\rst_counter' using process `\top.$proc$top_icebreaker.v:65$381'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top_icebreaker.v:65$381'.
  created $dff cell `$procdff$1474' with positive edge clock.

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 20 empty switches in `\vga.$proc$vga.v:469$567'.
Removing empty process `vga.$proc$vga.v:469$567'.
Found and cleaned up 15 empty switches in `\vga.$proc$vga.v:358$566'.
Removing empty process `vga.$proc$vga.v:358$566'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:337$553'.
Removing empty process `vga.$proc$vga.v:337$553'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:308$547'.
Removing empty process `vga.$proc$vga.v:308$547'.
Found and cleaned up 2 empty switches in `\vga.$proc$vga.v:292$522'.
Removing empty process `vga.$proc$vga.v:292$522'.
Found and cleaned up 12 empty switches in `\vga.$proc$vga.v:230$496'.
Removing empty process `vga.$proc$vga.v:230$496'.
Found and cleaned up 14 empty switches in `\vga.$proc$vga.v:163$457'.
Removing empty process `vga.$proc$vga.v:163$457'.
Found and cleaned up 1 empty switch in `\vga.$proc$vga.v:130$395'.
Removing empty process `vga.$proc$vga.v:130$395'.
Removing empty process `top.$proc$top_icebreaker.v:29$391'.
Found and cleaned up 2 empty switches in `\top.$proc$top_icebreaker.v:65$381'.
Removing empty process `top.$proc$top_icebreaker.v:65$381'.
Cleaned up 94 empty switches.

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga.
<suppressed ~33 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module vga.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~8 debug messages>

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 320 unused wires.
<suppressed ~3 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~195 debug messages>
Removed a total of 65 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\vga.$procmux$681: \vga.ball_angle [3] -> 1'1
      Replacing known input bits on port B of cell $flatten\vga.$procmux$677: \vga.ball_angle [3] -> 1'0
      Replacing known input bits on port B of cell $flatten\vga.$procmux$657: \vga.ball_angle [3] -> 1'1
      Replacing known input bits on port B of cell $flatten\vga.$procmux$653: \vga.ball_angle [3] -> 1'0
      Replacing known input bits on port A of cell $flatten\vga.$procmux$842: \vga.ball_motion_l -> 1'1
      Replacing known input bits on port A of cell $flatten\vga.$procmux$840: \vga.ball_motion_l -> 1'1
      Replacing known input bits on port A of cell $flatten\vga.$procmux$835: \vga.ball_motion_l -> 1'0
      Replacing known input bits on port A of cell $flatten\vga.$procmux$833: \vga.ball_motion_l -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~55 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\vga.$procmux$1002: { $flatten\vga.$procmux$1009_CMP $flatten\vga.$procmux$1008_CMP $auto$opt_reduce.cc:134:opt_pmux$1476 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$1014: { $flatten\vga.$procmux$1008_CMP $auto$opt_reduce.cc:134:opt_pmux$1480 $auto$opt_reduce.cc:134:opt_pmux$1478 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$932: { $flatten\vga.$procmux$937_CMP $auto$opt_reduce.cc:134:opt_pmux$1482 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$943: { $flatten\vga.$procmux$937_CMP $flatten\vga.$procmux$936_CMP $auto$opt_reduce.cc:134:opt_pmux$1484 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$952: { $flatten\vga.$procmux$938_CMP $flatten\vga.$procmux$937_CMP $auto$opt_reduce.cc:134:opt_pmux$1486 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$964: { $flatten\vga.$procmux$937_CMP $auto$opt_reduce.cc:134:opt_pmux$1490 $auto$opt_reduce.cc:134:opt_pmux$1488 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$982: { $flatten\vga.$procmux$1008_CMP $auto$opt_reduce.cc:134:opt_pmux$1492 }
    New ctrl vector for $pmux cell $flatten\vga.$procmux$993: { $flatten\vga.$procmux$1008_CMP $flatten\vga.$procmux$1007_CMP $auto$opt_reduce.cc:134:opt_pmux$1494 }
  Optimizing cells in module \top.
Performed a total of 8 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 78 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.vga.score_l_pixels as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.vga.score_r_pixels as FSM state register:
    Users of register don't seem to benefit from recoding.

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1473 ($dff) from module top (D = $sub$top_icebreaker.v:69$383_Y [9:0], Q = \rst_counter).
Adding SRST signal on $flatten\vga.$procdff$1471 ($dff) from module top (D = $flatten\vga.$ternary$vga.v:144$455_Y, Q = \vga.red, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1470 ($dff) from module top (D = $flatten\vga.$procmux$1367_Y, Q = \vga.hs_out, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1469 ($dff) from module top (D = $flatten\vga.$procmux$1204_Y, Q = \vga.count_h_score_r_2, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1468 ($dff) from module top (D = $flatten\vga.$procmux$1234_Y, Q = \vga.count_h_score_r_1, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1467 ($dff) from module top (D = $flatten\vga.$procmux$1261_Y, Q = \vga.count_h_score_r_0, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1466 ($dff) from module top (D = $flatten\vga.$procmux$1285_Y, Q = \vga.count_h_score_l_2, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1465 ($dff) from module top (D = $flatten\vga.$procmux$1306_Y, Q = \vga.count_h_score_l_1, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1464 ($dff) from module top (D = $flatten\vga.$procmux$1324_Y, Q = \vga.count_h_score_l_0, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1463 ($dff) from module top (D = $flatten\vga.$procmux$1339_Y, Q = \vga.count_h_paddle_r, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1462 ($dff) from module top (D = $flatten\vga.$procmux$1351_Y, Q = \vga.count_h_paddle_l, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1461 ($dff) from module top (D = $flatten\vga.$procmux$1359_Y, Q = \vga.count_h_ball, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1460 ($dff) from module top (D = $flatten\vga.$procmux$1198_Y, Q = \vga.count_h, rval = 10'1111111111).
Adding SRST signal on $flatten\vga.$procdff$1459 ($dff) from module top (D = $flatten\vga.$procmux$1388_Y, Q = \vga.blank_h, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1550 ($sdff) from module top (D = $flatten\vga.$procmux$1385_Y, Q = \vga.blank_h).
Adding SRST signal on $flatten\vga.$procdff$1458 ($dff) from module top (D = $flatten\vga.$procmux$1084_Y, Q = \vga.vs_out, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1560 ($sdff) from module top (D = $flatten\vga.$procmux$1077_Y, Q = \vga.vs_out).
Adding EN signal on $flatten\vga.$procdff$1457 ($dff) from module top (D = $flatten\vga.$procmux$1091_Y, Q = \vga.count_v_score_4).
Adding EN signal on $flatten\vga.$procdff$1456 ($dff) from module top (D = $flatten\vga.$procmux$1102_Y, Q = \vga.count_v_score_3).
Adding EN signal on $flatten\vga.$procdff$1455 ($dff) from module top (D = $flatten\vga.$procmux$1113_Y, Q = \vga.count_v_score_2).
Adding EN signal on $flatten\vga.$procdff$1454 ($dff) from module top (D = $flatten\vga.$procmux$1124_Y, Q = \vga.count_v_score_1).
Adding EN signal on $flatten\vga.$procdff$1453 ($dff) from module top (D = $flatten\vga.$procmux$1135_Y, Q = \vga.count_v_score_0).
Adding EN signal on $flatten\vga.$procdff$1452 ($dff) from module top (D = $flatten\vga.$procmux$1146_Y, Q = \vga.count_v_paddle_r).
Adding EN signal on $flatten\vga.$procdff$1451 ($dff) from module top (D = $flatten\vga.$procmux$1157_Y, Q = \vga.count_v_paddle_l).
Adding SRST signal on $flatten\vga.$procdff$1450 ($dff) from module top (D = $flatten\vga.$procmux$1172_Y, Q = \vga.count_v, rval = 9'111111111).
Adding EN signal on $auto$ff.cc:266:slice$1601 ($sdff) from module top (D = $flatten\vga.$procmux$1170_Y, Q = \vga.count_v).
Adding SRST signal on $flatten\vga.$procdff$1449 ($dff) from module top (D = $flatten\vga.$procmux$1183_Y, Q = \vga.blank_v, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1603 ($sdff) from module top (D = $flatten\vga.$procmux$1178_Y, Q = \vga.blank_v).
Adding SRST signal on $flatten\vga.$procdff$1448 ($dff) from module top (D = $flatten\vga.$add$vga.v:300$546_Y [24:0], Q = \vga.interval_counter, rval = 25'0000000000000000000000000).
Adding SRST signal on $flatten\vga.$procdff$1447 ($dff) from module top (D = $flatten\vga.$procmux$1045_Y, Q = \vga.right_down_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1446 ($dff) from module top (D = $flatten\vga.$procmux$1049_Y, Q = \vga.right_up_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1445 ($dff) from module top (D = $flatten\vga.$procmux$1053_Y, Q = \vga.left_down_pressed, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1444 ($dff) from module top (D = $flatten\vga.$procmux$1057_Y, Q = \vga.left_up_pressed, rval = 1'0).
Adding EN signal on $flatten\vga.$procdff$1443 ($dff) from module top (D = \vga.right_down, Q = \vga.right_down_1d).
Adding EN signal on $flatten\vga.$procdff$1442 ($dff) from module top (D = \vga.right_up, Q = \vga.right_up_1d).
Adding EN signal on $flatten\vga.$procdff$1441 ($dff) from module top (D = \vga.left_down, Q = \vga.left_down_1d).
Adding EN signal on $flatten\vga.$procdff$1440 ($dff) from module top (D = \vga.left_up, Q = \vga.left_up_1d).
Adding SRST signal on $flatten\vga.$procdff$1439 ($dff) from module top (D = $flatten\vga.$procmux$1033_Y, Q = \vga.paddle_r_pos_v, rval = 9'011110000).
Adding EN signal on $auto$ff.cc:266:slice$1622 ($sdff) from module top (D = $flatten\vga.$procmux$1033_Y, Q = \vga.paddle_r_pos_v).
Adding SRST signal on $flatten\vga.$procdff$1438 ($dff) from module top (D = $flatten\vga.$procmux$1040_Y, Q = \vga.paddle_l_pos_v, rval = 9'011110000).
Adding EN signal on $auto$ff.cc:266:slice$1626 ($sdff) from module top (D = $flatten\vga.$procmux$1040_Y, Q = \vga.paddle_l_pos_v).
Adding EN signal on $flatten\vga.$procdff$1437 ($dff) from module top (D = $flatten\vga.$0\score_r_pixels[2:0], Q = \vga.score_r_pixels).
Adding EN signal on $flatten\vga.$procdff$1436 ($dff) from module top (D = $flatten\vga.$0\score_l_pixels[2:0], Q = \vga.score_l_pixels).
Adding SRST signal on $flatten\vga.$procdff$1435 ($dff) from module top (D = $flatten\vga.$procmux$802_Y, Q = \vga.hide_r, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1434 ($dff) from module top (D = $flatten\vga.$procmux$745_Y, Q = \vga.score_r, rval = 3'000).
Adding SRST signal on $flatten\vga.$procdff$1433 ($dff) from module top (D = $flatten\vga.$procmux$764_Y, Q = \vga.hide_l, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$1432 ($dff) from module top (D = $flatten\vga.$procmux$783_Y, Q = \vga.score_l, rval = 3'000).
Adding SRST signal on $flatten\vga.$procdff$1431 ($dff) from module top (D = { $flatten\vga.$procmux$700_Y $flatten\vga.$procmux$726_Y }, Q = \vga.ball_angle, rval = 4'1001).
Adding EN signal on $auto$ff.cc:266:slice$1640 ($sdff) from module top (D = $flatten\vga.$procmux$724_Y, Q = \vga.ball_angle [2:0]).
Adding EN signal on $auto$ff.cc:266:slice$1640 ($sdff) from module top (D = $flatten\vga.$procmux$698_Y, Q = \vga.ball_angle [3]).
Adding SRST signal on $flatten\vga.$procdff$1430 ($dff) from module top (D = $flatten\vga.$procmux$826_Y, Q = \vga.ball_ratio, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1667 ($sdff) from module top (D = $flatten\vga.$procmux$824_Y, Q = \vga.ball_ratio).
Adding SRST signal on $flatten\vga.$procdff$1429 ($dff) from module top (D = $flatten\vga.$procmux$846_Y, Q = \vga.ball_motion_l, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1675 ($sdff) from module top (D = $flatten\vga.$procmux$844_Y, Q = \vga.ball_motion_l).
Adding SRST signal on $flatten\vga.$procdff$1428 ($dff) from module top (D = $flatten\vga.$procmux$900_Y, Q = \vga.ball_pos_v, rval = 9'011110000).
Adding EN signal on $auto$ff.cc:266:slice$1677 ($sdff) from module top (D = $flatten\vga.$procmux$898_Y, Q = \vga.ball_pos_v).
Adding SRST signal on $flatten\vga.$procdff$1427 ($dff) from module top (D = $flatten\vga.$procmux$926_Y, Q = \vga.ball_pos_h, rval = 10'1001110000).
Adding EN signal on $auto$ff.cc:266:slice$1689 ($sdff) from module top (D = $flatten\vga.$procmux$924_Y, Q = \vga.ball_pos_h).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 114 unused cells and 113 unused wires.
<suppressed ~116 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$sub$top_icebreaker.v:69$383 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$sub$top_icebreaker.v:69$383 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1555 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1553 ($ne).
Removed top 1 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1645 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$flatten\vga.$procmux$1008_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$1007_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$1006_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1643 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$flatten\vga.$procmux$937_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$936_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$flatten\vga.$procmux$935_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:554$598 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:554$598 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:546$596 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:546$596 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:531$588 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:531$588 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:523$587 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:523$587 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:515$585 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:515$585 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:513$584 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:508$580 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:508$580 ($sub).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:501$579 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:501$579 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:500$578 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:500$578 ($add).
Removed top 6 bits (of 10) from port B of cell top.$flatten\vga.$eq$vga.v:491$571 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:352$565 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:352$565 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:351$563 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:349$562 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:349$562 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:348$560 ($gt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:346$559 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:346$559 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:345$557 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:343$556 ($sub).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:343$556 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:342$554 ($gt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:300$546 ($add).
Removed top 7 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:300$546 ($add).
Removed top 8 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:299$543 ($ne).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:298$537 ($ne).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:297$531 ($ne).
Removed top 7 bits (of 25) from port B of cell top.$flatten\vga.$ne$vga.v:296$526 ($ne).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:279$520 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:279$519 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:276$517 ($lt).
Removed top 3 bits (of 9) from port B of cell top.$flatten\vga.$eq$vga.v:271$516 ($eq).
Removed top 3 bits (of 9) from port B of cell top.$flatten\vga.$eq$vga.v:266$515 ($eq).
Removed top 3 bits (of 9) from port B of cell top.$flatten\vga.$eq$vga.v:261$514 ($eq).
Removed top 4 bits (of 9) from port B of cell top.$flatten\vga.$eq$vga.v:256$513 ($eq).
Removed top 4 bits (of 9) from port B of cell top.$flatten\vga.$eq$vga.v:251$512 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:245$509 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:245$508 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:245$508 ($add).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:245$506 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:245$506 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:240$503 ($sub).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:240$502 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:240$502 ($add).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:240$500 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:240$500 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:238$499 ($add).
Removed top 23 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:238$499 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:236$498 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:235$497 ($ge).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:220$494 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:216$492 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:212$490 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:209$488 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:209$487 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:206$485 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:206$484 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:203$482 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:203$481 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:199$479 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:199$478 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:196$476 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:196$475 ($ge).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:193$473 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:193$472 ($ge).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:189$470 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:189$469 ($ge).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:185$467 ($lt).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:185$466 ($ge).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:181$463 ($sub).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:181$462 ($add).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:181$462 ($add).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:181$460 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:181$460 ($sub).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:179$459 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:179$459 ($add).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:177$458 ($lt).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$1670 ($ne).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:152$414 ($lt).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:152$412 ($ge).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:150$407 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:150$407 ($add).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:150$404 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:150$404 ($sub).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:144$398 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:144$397 ($gt).
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:150$407_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:179$459_Y.
Removed top 21 bits (of 32) from wire top.$flatten\vga.$add$vga.v:181$462_Y.
Removed top 23 bits (of 32) from wire top.$flatten\vga.$add$vga.v:238$499_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:240$502_Y.
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:245$508_Y.
Removed top 7 bits (of 32) from wire top.$flatten\vga.$add$vga.v:300$546_Y.
Removed top 23 bits (of 32) from wire top.$flatten\vga.$add$vga.v:346$559_Y.
Removed top 23 bits (of 32) from wire top.$flatten\vga.$add$vga.v:352$565_Y.
Removed top 29 bits (of 32) from wire top.$flatten\vga.$add$vga.v:500$578_Y.
Removed top 28 bits (of 32) from wire top.$flatten\vga.$add$vga.v:501$579_Y.
Removed top 23 bits (of 32) from wire top.$flatten\vga.$add$vga.v:515$585_Y.
Removed top 29 bits (of 32) from wire top.$flatten\vga.$add$vga.v:531$588_Y.
Removed top 29 bits (of 32) from wire top.$flatten\vga.$add$vga.v:546$596_Y.
Removed top 26 bits (of 32) from wire top.$flatten\vga.$add$vga.v:554$598_Y.
Removed top 22 bits (of 32) from wire top.$sub$top_icebreaker.v:69$383_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~1024 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\vga.$add$vga.v:150$407 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:179$459 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:181$462 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:238$499 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:240$502 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:245$508 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:300$546 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:346$559 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:352$565 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:500$578 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:501$579 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:515$585 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:531$588 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:546$596 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:554$598 ($add).
  creating $macc model for $flatten\vga.$sub$vga.v:150$404 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:181$460 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:181$463 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:240$500 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:240$503 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:245$506 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:245$509 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:343$556 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:349$562 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:508$580 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:523$587 ($sub).
  creating $macc model for $sub$top_icebreaker.v:69$383 ($sub).
  creating $alu model for $macc $sub$top_icebreaker.v:69$383.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:523$587.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:508$580.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:349$562.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:343$556.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:245$509.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:245$506.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:240$503.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:240$500.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:181$463.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:181$460.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:150$404.
  creating $alu model for $macc $flatten\vga.$add$vga.v:554$598.
  creating $alu model for $macc $flatten\vga.$add$vga.v:546$596.
  creating $alu model for $macc $flatten\vga.$add$vga.v:531$588.
  creating $alu model for $macc $flatten\vga.$add$vga.v:515$585.
  creating $alu model for $macc $flatten\vga.$add$vga.v:501$579.
  creating $alu model for $macc $flatten\vga.$add$vga.v:500$578.
  creating $alu model for $macc $flatten\vga.$add$vga.v:352$565.
  creating $alu model for $macc $flatten\vga.$add$vga.v:346$559.
  creating $alu model for $macc $flatten\vga.$add$vga.v:300$546.
  creating $alu model for $macc $flatten\vga.$add$vga.v:245$508.
  creating $alu model for $macc $flatten\vga.$add$vga.v:240$502.
  creating $alu model for $macc $flatten\vga.$add$vga.v:238$499.
  creating $alu model for $macc $flatten\vga.$add$vga.v:181$462.
  creating $alu model for $macc $flatten\vga.$add$vga.v:179$459.
  creating $alu model for $macc $flatten\vga.$add$vga.v:150$407.
  creating $alu model for $flatten\vga.$ge$vga.v:152$412 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:181$461 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:185$466 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:189$469 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:193$472 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:196$475 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:199$478 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:203$481 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:206$484 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:209$487 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:235$497 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:240$501 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:245$507 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:493$573 ($ge): new $alu
  creating $alu model for $flatten\vga.$ge$vga.v:539$591 ($ge): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:144$397 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:150$405 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:279$519 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:342$554 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:348$560 ($gt): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:493$575 ($le): new $alu
  creating $alu model for $flatten\vga.$le$vga.v:539$593 ($le): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:144$398 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:150$408 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:152$414 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:177$458 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:181$464 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:185$467 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:189$470 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:193$473 ($lt): merged with $flatten\vga.$ge$vga.v:196$475.
  creating $alu model for $flatten\vga.$lt$vga.v:196$476 ($lt): merged with $flatten\vga.$ge$vga.v:199$478.
  creating $alu model for $flatten\vga.$lt$vga.v:199$479 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:203$482 ($lt): merged with $flatten\vga.$ge$vga.v:206$484.
  creating $alu model for $flatten\vga.$lt$vga.v:206$485 ($lt): merged with $flatten\vga.$ge$vga.v:209$487.
  creating $alu model for $flatten\vga.$lt$vga.v:209$488 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:212$490 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:216$492 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:220$494 ($lt): merged with $flatten\vga.$ge$vga.v:235$497.
  creating $alu model for $flatten\vga.$lt$vga.v:236$498 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:240$504 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:245$510 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:276$517 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:279$520 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:345$557 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:351$563 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:513$584 ($lt): new $alu
  creating $alu cell for $flatten\vga.$lt$vga.v:513$584: $auto$alumacc.cc:485:replace_alu$1759
  creating $alu cell for $flatten\vga.$lt$vga.v:351$563: $auto$alumacc.cc:485:replace_alu$1764
  creating $alu cell for $flatten\vga.$lt$vga.v:345$557: $auto$alumacc.cc:485:replace_alu$1769
  creating $alu cell for $flatten\vga.$lt$vga.v:279$520: $auto$alumacc.cc:485:replace_alu$1774
  creating $alu cell for $flatten\vga.$lt$vga.v:276$517: $auto$alumacc.cc:485:replace_alu$1779
  creating $alu cell for $flatten\vga.$lt$vga.v:245$510: $auto$alumacc.cc:485:replace_alu$1790
  creating $alu cell for $flatten\vga.$lt$vga.v:240$504: $auto$alumacc.cc:485:replace_alu$1795
  creating $alu cell for $flatten\vga.$lt$vga.v:236$498: $auto$alumacc.cc:485:replace_alu$1800
  creating $alu cell for $flatten\vga.$lt$vga.v:216$492: $auto$alumacc.cc:485:replace_alu$1805
  creating $alu cell for $flatten\vga.$lt$vga.v:212$490: $auto$alumacc.cc:485:replace_alu$1810
  creating $alu cell for $flatten\vga.$lt$vga.v:209$488: $auto$alumacc.cc:485:replace_alu$1815
  creating $alu cell for $flatten\vga.$lt$vga.v:199$479: $auto$alumacc.cc:485:replace_alu$1826
  creating $alu cell for $flatten\vga.$lt$vga.v:189$470: $auto$alumacc.cc:485:replace_alu$1837
  creating $alu cell for $flatten\vga.$lt$vga.v:185$467: $auto$alumacc.cc:485:replace_alu$1842
  creating $alu cell for $flatten\vga.$lt$vga.v:181$464: $auto$alumacc.cc:485:replace_alu$1853
  creating $alu cell for $flatten\vga.$lt$vga.v:177$458: $auto$alumacc.cc:485:replace_alu$1858
  creating $alu cell for $flatten\vga.$lt$vga.v:152$414: $auto$alumacc.cc:485:replace_alu$1863
  creating $alu cell for $flatten\vga.$lt$vga.v:150$408: $auto$alumacc.cc:485:replace_alu$1874
  creating $alu cell for $flatten\vga.$lt$vga.v:144$398: $auto$alumacc.cc:485:replace_alu$1879
  creating $alu cell for $flatten\vga.$le$vga.v:539$593: $auto$alumacc.cc:485:replace_alu$1890
  creating $alu cell for $flatten\vga.$le$vga.v:493$575: $auto$alumacc.cc:485:replace_alu$1899
  creating $alu cell for $flatten\vga.$gt$vga.v:279$519: $auto$alumacc.cc:485:replace_alu$1908
  creating $alu cell for $flatten\vga.$gt$vga.v:150$405: $auto$alumacc.cc:485:replace_alu$1919
  creating $alu cell for $flatten\vga.$gt$vga.v:144$397: $auto$alumacc.cc:485:replace_alu$1930
  creating $alu cell for $flatten\vga.$ge$vga.v:539$591: $auto$alumacc.cc:485:replace_alu$1935
  creating $alu cell for $flatten\vga.$ge$vga.v:493$573: $auto$alumacc.cc:485:replace_alu$1948
  creating $alu cell for $flatten\vga.$ge$vga.v:245$507: $auto$alumacc.cc:485:replace_alu$1961
  creating $alu cell for $flatten\vga.$ge$vga.v:240$501: $auto$alumacc.cc:485:replace_alu$1974
  creating $alu cell for $flatten\vga.$ge$vga.v:235$497, $flatten\vga.$lt$vga.v:220$494: $auto$alumacc.cc:485:replace_alu$1987
  creating $alu cell for $flatten\vga.$ge$vga.v:209$487, $flatten\vga.$lt$vga.v:206$485: $auto$alumacc.cc:485:replace_alu$2000
  creating $alu cell for $flatten\vga.$ge$vga.v:206$484, $flatten\vga.$lt$vga.v:203$482: $auto$alumacc.cc:485:replace_alu$2013
  creating $alu cell for $flatten\vga.$ge$vga.v:203$481: $auto$alumacc.cc:485:replace_alu$2026
  creating $alu cell for $flatten\vga.$ge$vga.v:199$478, $flatten\vga.$lt$vga.v:196$476: $auto$alumacc.cc:485:replace_alu$2035
  creating $alu cell for $flatten\vga.$ge$vga.v:196$475, $flatten\vga.$lt$vga.v:193$473: $auto$alumacc.cc:485:replace_alu$2048
  creating $alu cell for $flatten\vga.$ge$vga.v:193$472: $auto$alumacc.cc:485:replace_alu$2061
  creating $alu cell for $flatten\vga.$ge$vga.v:189$469: $auto$alumacc.cc:485:replace_alu$2070
  creating $alu cell for $flatten\vga.$ge$vga.v:185$466: $auto$alumacc.cc:485:replace_alu$2083
  creating $alu cell for $flatten\vga.$ge$vga.v:181$461: $auto$alumacc.cc:485:replace_alu$2092
  creating $alu cell for $flatten\vga.$ge$vga.v:152$412: $auto$alumacc.cc:485:replace_alu$2105
  creating $alu cell for $flatten\vga.$add$vga.v:150$407: $auto$alumacc.cc:485:replace_alu$2114
  creating $alu cell for $flatten\vga.$add$vga.v:179$459: $auto$alumacc.cc:485:replace_alu$2117
  creating $alu cell for $flatten\vga.$add$vga.v:181$462: $auto$alumacc.cc:485:replace_alu$2120
  creating $alu cell for $flatten\vga.$add$vga.v:238$499: $auto$alumacc.cc:485:replace_alu$2123
  creating $alu cell for $flatten\vga.$gt$vga.v:342$554: $auto$alumacc.cc:485:replace_alu$2126
  creating $alu cell for $flatten\vga.$add$vga.v:240$502: $auto$alumacc.cc:485:replace_alu$2131
  creating $alu cell for $flatten\vga.$gt$vga.v:348$560: $auto$alumacc.cc:485:replace_alu$2134
  creating $alu cell for $flatten\vga.$add$vga.v:245$508: $auto$alumacc.cc:485:replace_alu$2139
  creating $alu cell for $flatten\vga.$add$vga.v:300$546: $auto$alumacc.cc:485:replace_alu$2142
  creating $alu cell for $flatten\vga.$add$vga.v:346$559: $auto$alumacc.cc:485:replace_alu$2145
  creating $alu cell for $flatten\vga.$add$vga.v:352$565: $auto$alumacc.cc:485:replace_alu$2148
  creating $alu cell for $flatten\vga.$add$vga.v:500$578: $auto$alumacc.cc:485:replace_alu$2151
  creating $alu cell for $flatten\vga.$add$vga.v:501$579: $auto$alumacc.cc:485:replace_alu$2154
  creating $alu cell for $flatten\vga.$add$vga.v:515$585: $auto$alumacc.cc:485:replace_alu$2157
  creating $alu cell for $flatten\vga.$add$vga.v:531$588: $auto$alumacc.cc:485:replace_alu$2160
  creating $alu cell for $flatten\vga.$add$vga.v:546$596: $auto$alumacc.cc:485:replace_alu$2163
  creating $alu cell for $flatten\vga.$add$vga.v:554$598: $auto$alumacc.cc:485:replace_alu$2166
  creating $alu cell for $flatten\vga.$sub$vga.v:150$404: $auto$alumacc.cc:485:replace_alu$2169
  creating $alu cell for $flatten\vga.$sub$vga.v:181$460: $auto$alumacc.cc:485:replace_alu$2172
  creating $alu cell for $flatten\vga.$sub$vga.v:181$463: $auto$alumacc.cc:485:replace_alu$2175
  creating $alu cell for $flatten\vga.$sub$vga.v:240$500: $auto$alumacc.cc:485:replace_alu$2178
  creating $alu cell for $flatten\vga.$sub$vga.v:240$503: $auto$alumacc.cc:485:replace_alu$2181
  creating $alu cell for $flatten\vga.$sub$vga.v:245$506: $auto$alumacc.cc:485:replace_alu$2184
  creating $alu cell for $flatten\vga.$sub$vga.v:245$509: $auto$alumacc.cc:485:replace_alu$2187
  creating $alu cell for $flatten\vga.$sub$vga.v:343$556: $auto$alumacc.cc:485:replace_alu$2190
  creating $alu cell for $flatten\vga.$sub$vga.v:349$562: $auto$alumacc.cc:485:replace_alu$2193
  creating $alu cell for $flatten\vga.$sub$vga.v:508$580: $auto$alumacc.cc:485:replace_alu$2196
  creating $alu cell for $flatten\vga.$sub$vga.v:523$587: $auto$alumacc.cc:485:replace_alu$2199
  creating $alu cell for $sub$top_icebreaker.v:69$383: $auto$alumacc.cc:485:replace_alu$2202
  created 68 $alu and 0 $macc cells.

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~15 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

3.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.6. Executing OPT_DFF pass (perform DFF optimizations).

3.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 49 unused wires.
<suppressed ~2 debug messages>

3.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.9. Rerunning OPT passes. (Maybe there is more to do..)

3.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

3.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.13. Executing OPT_DFF pass (perform DFF optimizations).

3.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.16. Finished OPT passes. (There is nothing left to do.)

3.23. Executing MEMORY pass.

3.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

3.26. Executing TECHMAP pass (map to technology primitives).

3.26.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.26.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.27. Executing ICE40_BRAMINIT pass.

3.28. Executing OPT pass (performing simple optimizations).

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~79 debug messages>

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~126 debug messages>
Removed a total of 42 cells.

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 16 unused cells and 111 unused wires.
<suppressed ~17 debug messages>

3.28.5. Finished fast OPT passes.

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $pmux cell $flatten\vga.$procmux$1026:
      Old ports: A=3'111, B=6'010101, Y=$flatten\vga.$procmux$1026_Y
      New ports: A=2'11, B=4'1001, Y=$flatten\vga.$procmux$1026_Y [1:0]
      New connections: $flatten\vga.$procmux$1026_Y [2] = $flatten\vga.$procmux$1026_Y [0]
    Consolidated identical input bits for $pmux cell $flatten\vga.$procmux$976:
      Old ports: A=3'111, B=6'010101, Y=$flatten\vga.$procmux$976_Y
      New ports: A=2'11, B=4'1001, Y=$flatten\vga.$procmux$976_Y [1:0]
      New connections: $flatten\vga.$procmux$976_Y [2] = $flatten\vga.$procmux$976_Y [0]
  Optimizing cells in module \top.
Performed a total of 2 changes.

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$1668 ($sdffe) from module top (D = $flatten\vga.$procmux$808_Y, Q = \vga.ball_ratio).

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.9. Rerunning OPT passes. (Maybe there is more to do..)

3.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

3.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$2345: { $auto$opt_dff.cc:194:make_patterns_logic$1671 $auto$opt_dff.cc:194:make_patterns_logic$1669 $flatten\vga.$eq$vga.v:315$548_Y $flatten\vga.$ne$vga.v:510$581_Y }
  Optimizing cells in module \top.
Performed a total of 1 changes.

3.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.13. Executing OPT_DFF pass (perform DFF optimizations).

3.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.16. Rerunning OPT passes. (Maybe there is more to do..)

3.30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

3.30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.20. Executing OPT_DFF pass (perform DFF optimizations).

3.30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.23. Finished OPT passes. (There is nothing left to do.)

3.31. Executing ICE40_WRAPCARRY pass (wrap carries).

3.32. Executing TECHMAP pass (map to technology primitives).

3.32.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.32.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$19189243523493d505a4933d1bad417c570ea8a6\_80_ice40_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$a473f4770a4b60111e9e52de7ee27405c26ecd63\_80_ice40_alu for cells of type $alu.
Using template $paramod$403d74038787d91c0514bba9bf1032f6fa919203\_80_ice40_alu for cells of type $alu.
Using template $paramod$8a62ded8d652be76033db56ea9a2bbb5ea1d4453\_80_ice40_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_80_ice40_alu for cells of type $alu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_80_ice40_alu for cells of type $alu.
Using template $paramod$6f67705c43e5e94c02b6ebb52209ce5aa5ade4c1\_80_ice40_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_80_ice40_alu for cells of type $alu.
Using template $paramod$f85408ed1aa3d09e465edae8a7bf590332ae9f7b\_80_ice40_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_80_ice40_alu for cells of type $alu.
Using template $paramod$c6885379b74fbbf6906b35106e386e521d86cbb2\_80_ice40_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_80_ice40_alu for cells of type $alu.
Using template $paramod$04f121e3c8858ac36578330193fd248b9a31e99c\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_80_ice40_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_80_ice40_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_80_ice40_alu for cells of type $alu.
Using template $paramod$c4905825bb8ecc38b98eb4167e8b007447af7884\_80_ice40_alu for cells of type $alu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_80_ice40_alu for cells of type $alu.
Using template $paramod$821d2886e47353e724eaca46af4992e9c3e6ac1d\_80_ice40_alu for cells of type $alu.
Using template $paramod$c6b63e723603573fdc33dc74600fd0455fbbc6dc\_80_ice40_alu for cells of type $alu.
Using template $paramod$b2626aff51a34e60b9c57dceb41667aaf5650a38\_80_ice40_alu for cells of type $alu.
Using template $paramod$21b43a343f2bc4ba62df8a2c90631d371d8e7ce8\_80_ice40_alu for cells of type $alu.
Using template $paramod$8d7f98f10ed0231647041eea72c2a8a293a33560\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using template $paramod$ea139abf5d9f33c5a8f110be2ae0a1d01adc5fd6\_80_ice40_alu for cells of type $alu.
Using template $paramod$a2af9b43308e3114c3b5dd3f4dc3329b2387395d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~1604 debug messages>

3.33. Executing OPT pass (performing simple optimizations).

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2574 debug messages>

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~2376 debug messages>
Removed a total of 792 cells.

3.33.3. Executing OPT_DFF pass (perform DFF optimizations).

3.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 82 unused cells and 1715 unused wires.
<suppressed ~83 debug messages>

3.33.5. Finished fast OPT passes.

3.34. Executing ICE40_OPT pass (performing simple optimizations).

3.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1759.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1764.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1769.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1774.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1779.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1779.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1800.slice[0].carry: CO=\vga.count_v [5]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1805.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1810.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1815.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1826.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1837.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1842.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1858.slice[0].carry: CO=\vga.count_h [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1863.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1779.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1874.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1874.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1879.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1908.slice[0].carry: CO=\vga.count_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1930.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1987.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1810.X [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2000.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2013.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2026.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2035.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2048.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2061.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2070.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2083.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1815.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2105.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1779.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2114.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2114.slice[8].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2117.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2120.slice[0].carry: CO=\vga.ball_pos_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2120.slice[9].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2123.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2126.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1899.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2131.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2131.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2134.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2139.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2139.slice[7].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2142.slice[0].carry: CO=\vga.interval_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2145.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2148.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2151.slice[0].carry: CO=\vga.score_r [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2154.slice[0].carry: CO=\vga.ball_angle [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2157.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2160.slice[0].carry: CO=\vga.ball_ratio [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2163.slice[0].carry: CO=\vga.score_l [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2166.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2169.slice[0].carry: CO=\vga.ball_pos_v [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2169.slice[8].carry: CO=$auto$alumacc.cc:485:replace_alu$2169.C [8]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2172.slice[0].carry: CO=\vga.ball_pos_h [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2172.slice[9].carry: CO=$auto$alumacc.cc:485:replace_alu$2172.C [9]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2175.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$2175.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2178.slice[0].carry: CO=\vga.paddle_l_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2178.slice[7].carry: CO=$auto$alumacc.cc:485:replace_alu$2178.C [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2181.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$2181.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2184.slice[0].carry: CO=\vga.paddle_r_pos_v [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2184.slice[7].carry: CO=$auto$alumacc.cc:485:replace_alu$2184.C [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[11].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[12].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[13].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[14].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[16].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [16]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[17].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[18].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[19].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [19]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[20].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [20]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[21].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[22].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[23].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [23]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[24].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[25].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [25]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[26].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[27].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[28].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[29].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [29]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[30].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [30]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2187.slice[31].carry: CO=$auto$alumacc.cc:485:replace_alu$2187.C [31]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2190.slice[0].carry: CO=\vga.paddle_l_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2193.slice[0].carry: CO=\vga.paddle_r_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2196.slice[0].carry: CO=\vga.ball_pos_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2199.slice[0].carry: CO=\vga.ball_pos_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$2202.slice[0].carry: CO=\rst_counter [0]

3.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~16 debug messages>

3.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~615 debug messages>
Removed a total of 205 cells.

3.34.4. Executing OPT_DFF pass (perform DFF optimizations).

3.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 17 unused cells and 14 unused wires.
<suppressed ~18 debug messages>

3.34.6. Rerunning OPT passes. (Removed registers in this run.)

3.34.7. Running ICE40 specific optimizations.

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.34.10. Executing OPT_DFF pass (perform DFF optimizations).

3.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.34.12. Finished OPT passes. (There is nothing left to do.)

3.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
No more expansions possible.
<suppressed ~165 debug messages>

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1769.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2114.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2114.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2117.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2120.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2120.slice[9].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2123.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2131.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2131.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2139.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2139.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2142.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2145.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2148.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2151.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2154.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2157.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2160.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2163.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2166.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2169.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2169.slice[8].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2172.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2172.slice[9].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2175.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2175.slice[11].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2178.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2181.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2181.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2184.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2184.slice[7].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2187.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2187.slice[10].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2199.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$2202.slice[0].carry ($lut).

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~556 debug messages>

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~252 debug messages>
Removed a total of 84 cells.

3.39.4. Executing OPT_DFF pass (perform DFF optimizations).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 8 unused cells and 968 unused wires.
<suppressed ~9 debug messages>

3.39.6. Rerunning OPT passes. (Removed registers in this run.)

3.39.7. Running ICE40 specific optimizations.

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

3.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.10. Executing OPT_DFF pass (perform DFF optimizations).

3.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.12. Rerunning OPT passes. (Removed registers in this run.)

3.39.13. Running ICE40 specific optimizations.

3.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.16. Executing OPT_DFF pass (perform DFF optimizations).

3.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.18. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1207 gates and 1580 wires to a netlist network with 371 inputs and 269 outputs.

3.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =     348.
ABC: Participating nodes from both networks       =     738.
ABC: Participating nodes from the first network   =     349. (  67.64 % of nodes)
ABC: Participating nodes from the second network  =     389. (  75.39 % of nodes)
ABC: Node pairs (any polarity)                    =     348. (  67.44 % of names can be moved)
ABC: Node pairs (same polarity)                   =     311. (  60.27 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      515
ABC RESULTS:        internal signals:      940
ABC RESULTS:           input signals:      371
ABC RESULTS:          output signals:      269
Removing temp directory.

3.42. Executing ICE40_WRAPCARRY pass (wrap carries).

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 531 unused cells and 1145 unused wires.

3.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      722
  1-LUT              146
  2-LUT               87
  3-LUT              289
  4-LUT              200
  with \SB_CARRY    (#0)  195
  with \SB_CARRY    (#1)  196

Eliminating LUTs.
Number of LUTs:      722
  1-LUT              146
  2-LUT               87
  3-LUT              289
  4-LUT              200
  with \SB_CARRY    (#0)  195
  with \SB_CARRY    (#1)  196

Combining LUTs.
Number of LUTs:      653
  1-LUT              101
  2-LUT               60
  3-LUT              272
  4-LUT              220
  with \SB_CARRY    (#0)  195
  with \SB_CARRY    (#1)  196

Eliminated 0 LUTs.
Combined 69 LUTs.
<suppressed ~6111 debug messages>

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$ae2167737e884e455e0dc9c6a1bfb0669403f070\$lut for cells of type $lut.
Using template $paramod$62b9cc19760df4f05d0c7360b790a1fb852ac400\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$359fe4e746656bf9c72aecaff84fc7bdea9f55a5\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$2d07c1a6c53c7b878509360922c4fa5ebedc3011\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod$575b200168b9e109c2ed99df4359056f2c6696ac\$lut for cells of type $lut.
Using template $paramod$59c595af41d4a5cce2d588c3a5f1342749ce7a77\$lut for cells of type $lut.
Using template $paramod$4b2297966ddb718657b80566604f97685ffc0120\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$052ca015f1400ebf950f85d5f181f7a5865c336c\$lut for cells of type $lut.
Using template $paramod$df196ed0a1da5c4a58c5e08a1dac304fd3fccaab\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$332a399730bfc61adea04021a76b1c4e4030f37d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$04b674496422df8889c01c3744b94097628ccfbc\$lut for cells of type $lut.
Using template $paramod$8c24dc0cdd336b7fb88bbf7eed45cec5cbae862b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$deb4f121bbf3d55ed9a98f692fd112e0918f51b5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$c471af5667a682bd131a5b479e58e470d1b2b7cd\$lut for cells of type $lut.
Using template $paramod$baa939b0bd5b3e0c8760492528669bd58f640542\$lut for cells of type $lut.
Using template $paramod$324558e3f64dc829e7fbda8b4d2b00176fe7107f\$lut for cells of type $lut.
Using template $paramod$441de597d9318495d3225f370c9f7379b3b0fd0d\$lut for cells of type $lut.
Using template $paramod$a59507d273cd827eb6c46c37820d50a1b717efdf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$fccccf8bb2add7667329c686feec7546eb9a3ae3\$lut for cells of type $lut.
Using template $paramod$ff10621ff350133ce54c2c9c3516ef034e8cfe58\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000010 for cells of type $lut.
Using template $paramod$509fac39e6dc69a71c7aa5142321a91f517795cd\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010011 for cells of type $lut.
Using template $paramod$927a9d8283ace908a2fb3858a8c9bb8c23272470\$lut for cells of type $lut.
Using template $paramod$d7c58189ac9f8b5907ead96072bf116760617c71\$lut for cells of type $lut.
Using template $paramod$d76856c88fdca5609a1600b549559282bda8a7dc\$lut for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod$a4df2b5be2b644499880e088a11556935f22b401\$lut for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod$2e11c0e004fab0373ef80005c65c968bc830b55a\$lut for cells of type $lut.
Using template $paramod$f54c0ffd7b041ca43eac7710ab19c0666d826c22\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod$ab8bb87959c5d7cfa27886cee1355b38e054a61a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100011 for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
Using template $paramod$b4f15f202f50520dbc381cd0880ac94f830f05a8\$lut for cells of type $lut.
Using template $paramod$de3d8c0ac9a85f776878d56395b6e0bf04ae72e7\$lut for cells of type $lut.
Using template $paramod$a5fa16f6792f721e525cbdcedb4e5d3e91843765\$lut for cells of type $lut.
Using template $paramod$38debc9ecb856f8fdb72adb11bd5220839a653fd\$lut for cells of type $lut.
Using template $paramod$7bcf8a0acb4facd1dfe70d22caec4edc2292bba2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod$2167383712a3ef5a7aa9a279cd8db29e1fc2db5f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$ff0881b6a38ff8b5c6827b9c051e63eb2b1133e6\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$a44bfc089ebe40b83c2c06bb965c500df992ecfb\$lut for cells of type $lut.
Using template $paramod$ab2e45f7a350a5d7d54d88d8019d5256ae32568f\$lut for cells of type $lut.
Using template $paramod$7411b6c6481ce0147d5e73ec2323a48eaba3647c\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod$ba05b8a1a425003df083aea0e69541f5cbdc68f2\$lut for cells of type $lut.
Using template $paramod$5c32c59025c0b98f20e63f249d83e7ebb4b085e3\$lut for cells of type $lut.
Using template $paramod$2d73cf21e7a3b53006ebbae47ecc48e73975ec46\$lut for cells of type $lut.
Using template $paramod$e0bde73e598487237493c8a43ca52c95a3727354\$lut for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod$162eacaa56f6f80a5a27551a5f2071c174364807\$lut for cells of type $lut.
Using template $paramod$4685bd76b86e63a7673afc1b48c70bed06b8ddfb\$lut for cells of type $lut.
Using template $paramod$7df4c08fb0cde7880ba83f9b205aeb94a0e38509\$lut for cells of type $lut.
Using template $paramod$e9c77024ca501b890c641f9c0b10e27242db8730\$lut for cells of type $lut.
Using template $paramod$cf53520cb74f7488f4a89a1925e17e6c53faf824\$lut for cells of type $lut.
Using template $paramod$4789582d00084c3344b7a6dacf516efd46244876\$lut for cells of type $lut.
Using template $paramod$cb807c4e5b3fc400512485c285f594d5cbc6ceda\$lut for cells of type $lut.
Using template $paramod$017d8c8b5f8f0bd543e7b1e7d026dcb67424a519\$lut for cells of type $lut.
Using template $paramod$fe9a0158d0352193457c4f5b6282ac86d35fb3ee\$lut for cells of type $lut.
Using template $paramod$e5e9da8fed769f971686eed8c5eea50e61f73aaa\$lut for cells of type $lut.
Using template $paramod$41d88be3baf1cb10710497efb1b66f834da3b71d\$lut for cells of type $lut.
Using template $paramod$c35ad3063d5038410210ddc72c1fd5fed46413b4\$lut for cells of type $lut.
Using template $paramod$a3cdc1eb771a2c6a16f64da161e11100ac409d2b\$lut for cells of type $lut.
Using template $paramod$243c00f5eb9faa1d5ce3478fdc389a56070781f8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$aff3a645bb9f572421a4f0f49cf8987ceb4bcdc5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$c24ed72ebb67e9ead6029e42e909ef7fc0abbb11\$lut for cells of type $lut.
Using template $paramod$92ae337dcfbfd75c23b894780eb529dcdde84bb2\$lut for cells of type $lut.
Using template $paramod$0a14d5e896aa3d4771d458c7bcc847abb47d8244\$lut for cells of type $lut.
Using template $paramod$175104ad114973f30397e1a69eae08cff730fc58\$lut for cells of type $lut.
Using template $paramod$22ee34ebaae3e885b4012d7036d75a6112129095\$lut for cells of type $lut.
Using template $paramod$d4fae2c0d9ad2966369cd4e39b81c71bcd1327c9\$lut for cells of type $lut.
Using template $paramod$90edf8d4fe439b92725b09f66e94b5afc9f35376\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2112 debug messages>
Removed 0 unused cells and 1406 unused wires.

3.46. Executing AUTONAME pass.
Renamed 33004 objects in module top (63 iterations).
<suppressed ~1947 debug messages>

3.47. Executing HIERARCHY pass (managing design hierarchy).

3.47.1. Analyzing design hierarchy..
Top module:  \top

3.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.48. Printing statistics.

=== top ===

   Number of wires:                540
   Number of wire bits:           3208
   Number of public wires:         540
   Number of public wire bits:    3208
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1503
     SB_CARRY                      706
     SB_DFF                          1
     SB_DFFE                        27
     SB_DFFESR                      27
     SB_DFFESS                      30
     SB_DFFSR                       48
     SB_DFFSS                       10
     SB_LUT4                       653
     SB_PLL40_PAD                    1

3.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.50. Executing JSON backend.

End of script. Logfile hash: 9cd7004f9c, CPU: user 1.58s system 0.02s, MEM: 42.54 MB peak
Yosys 0.27+22 (git sha1 53c0a6b78, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 19% 25x opt_expr (0 sec), 18% 15x read_verilog (0 sec), ...
