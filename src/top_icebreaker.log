
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+22 (git sha1 53c0a6b78, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `top_icebreaker.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top_icebreaker.v
Parsing Verilog input from `top_icebreaker.v' to AST representation.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Parsing `vga.v' using frontend ` -vlog2k' --

2. Executing Verilog-2005 frontend: vga.v
Parsing Verilog input from `vga.v' to AST representation.
Storing AST representation for module `$abstract\vga'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json top_icebreaker.json' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

3.3.1. Analyzing design hierarchy..
Top module:  \top

3.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\vga'.
Generating RTLIL representation for module `\vga'.
Note: Assuming pure combinatorial block at vga.v:350.3-534.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

3.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga

3.3.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \vga
Removing unused module `$abstract\vga'.
Removing unused module `$abstract\top'.
Removed 2 unused modules.

3.4. Executing PROC pass (convert processes to netlists).

3.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 4 switch rules as full_case in process $proc$vga.v:561$630 in module vga.
Marked 5 switch rules as full_case in process $proc$vga.v:536$621 in module vga.
Marked 3 switch rules as full_case in process $proc$vga.v:350$388 in module vga.
Marked 1 switch rules as full_case in process $proc$top_icebreaker.v:57$381 in module top.
Removed a total of 0 dead cases.

3.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 23 assignments to connections.

3.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top_icebreaker.v:22$384'.
  Set init value: \rst_counter = 10'1111111111

3.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.

3.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~33 debug messages>

3.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\vga.$proc$vga.v:561$630'.
     1/3: $0\vs_out[0:0]
     2/3: $0\count_v[14:0]
     3/3: $0\blank_v[0:0]
Creating decoders for process `\vga.$proc$vga.v:536$621'.
     1/3: $0\count_h[9:0]
     2/3: $0\hs_out[0:0]
     3/3: $0\blank_h[0:0]
Creating decoders for process `\vga.$proc$vga.v:350$388'.
     1/2: $0\wht[0:0]
     2/2: $0\blu[0:0]
Creating decoders for process `\top.$proc$top_icebreaker.v:22$384'.
Creating decoders for process `\top.$proc$top_icebreaker.v:57$381'.
     1/2: $0\rst[0:0]
     2/2: $0\rst_counter[9:0]

3.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\vga.\blu' from process `\vga.$proc$vga.v:350$388'.
No latch inferred for signal `\vga.\wht' from process `\vga.$proc$vga.v:350$388'.

3.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$892' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$893' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$894' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$895' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$896' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$897' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$898' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$899' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$900' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$901' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$902' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$903' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$904' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$905' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$906' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$907' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$908' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$909' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$910' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\vga.\blank_v' using process `\vga.$proc$vga.v:561$630'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\vga.\count_v' using process `\vga.$proc$vga.v:561$630'.
  created $dff cell `$procdff$913' with positive edge clock.
Creating register for signal `\vga.\vs_out' using process `\vga.$proc$vga.v:561$630'.
  created $dff cell `$procdff$914' with positive edge clock.
Creating register for signal `\vga.\blank_h' using process `\vga.$proc$vga.v:536$621'.
  created $dff cell `$procdff$915' with positive edge clock.
Creating register for signal `\vga.\count_h' using process `\vga.$proc$vga.v:536$621'.
  created $dff cell `$procdff$916' with positive edge clock.
Creating register for signal `\vga.\hs_out' using process `\vga.$proc$vga.v:536$621'.
  created $dff cell `$procdff$917' with positive edge clock.
Creating register for signal `\top.\rst_counter' using process `\top.$proc$top_icebreaker.v:57$381'.
  created $dff cell `$procdff$918' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top_icebreaker.v:57$381'.
  created $dff cell `$procdff$919' with positive edge clock.

3.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_sim.v:271$169'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:561$630'.
Removing empty process `vga.$proc$vga.v:561$630'.
Found and cleaned up 5 empty switches in `\vga.$proc$vga.v:536$621'.
Removing empty process `vga.$proc$vga.v:536$621'.
Found and cleaned up 3 empty switches in `\vga.$proc$vga.v:350$388'.
Removing empty process `vga.$proc$vga.v:350$388'.
Removing empty process `top.$proc$top_icebreaker.v:22$384'.
Found and cleaned up 2 empty switches in `\top.$proc$top_icebreaker.v:57$381'.
Removing empty process `top.$proc$top_icebreaker.v:57$381'.
Cleaned up 33 empty switches.

3.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga.
Optimizing module top.
<suppressed ~1 debug messages>

3.5. Executing FLATTEN pass (flatten design).
Deleting now unused module vga.
<suppressed ~1 debug messages>

3.6. Executing TRIBUF pass.

3.7. Executing DEMINOUT pass (demote inout ports to input or output).

3.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 49 unused wires.
<suppressed ~2 debug messages>

3.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~675 debug messages>
Removed a total of 225 cells.

3.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\vga.$procmux$763: { $auto$opt_reduce.cc:134:opt_pmux$923 $auto$opt_reduce.cc:134:opt_pmux$921 }
  Optimizing cells in module \top.
Performed a total of 1 changes.

3.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.11.6. Executing OPT_DFF pass (perform DFF optimizations).

3.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 225 unused wires.
<suppressed ~1 debug messages>

3.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.9. Rerunning OPT passes. (Maybe there is more to do..)

3.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.11.13. Executing OPT_DFF pass (perform DFF optimizations).

3.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.11.16. Finished OPT passes. (There is nothing left to do.)

3.12. Executing FSM pass (extract and optimize FSM).

3.12.1. Executing FSM_DETECT pass (finding FSMs in design).

3.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$918 ($dff) from module top (D = $sub$top_icebreaker.v:61$383_Y [9:0], Q = \rst_counter).
Adding SRST signal on $flatten\vga.$procdff$917 ($dff) from module top (D = $flatten\vga.$procmux$735_Y, Q = \vga.hs_out, rval = 1'0).
Adding SRST signal on $flatten\vga.$procdff$916 ($dff) from module top (D = $flatten\vga.$procmux$729_Y, Q = \vga.count_h, rval = 10'1111111111).
Adding SRST signal on $flatten\vga.$procdff$915 ($dff) from module top (D = $flatten\vga.$procmux$756_Y, Q = \vga.blank_h, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$931 ($sdff) from module top (D = $flatten\vga.$procmux$753_Y, Q = \vga.blank_h).
Adding SRST signal on $flatten\vga.$procdff$914 ($dff) from module top (D = $flatten\vga.$procmux$692_Y, Q = \vga.vs_out, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$941 ($sdff) from module top (D = $flatten\vga.$procmux$685_Y, Q = \vga.vs_out).
Adding SRST signal on $flatten\vga.$procdff$913 ($dff) from module top (D = $flatten\vga.$procmux$703_Y, Q = \vga.count_v, rval = 15'111111111111111).
Adding EN signal on $auto$ff.cc:266:slice$947 ($sdff) from module top (D = $flatten\vga.$procmux$701_Y, Q = \vga.count_v).
Adding SRST signal on $flatten\vga.$procdff$912 ($dff) from module top (D = $flatten\vga.$procmux$714_Y, Q = \vga.blank_v, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$949 ($sdff) from module top (D = $flatten\vga.$procmux$709_Y, Q = \vga.blank_v).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 17 unused cells and 17 unused wires.
<suppressed ~18 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$sub$top_icebreaker.v:61$383 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$sub$top_icebreaker.v:61$383 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$936 ($ne).
Removed top 2 bits (of 3) from port B of cell top.$auto$opt_dff.cc:195:make_patterns_logic$934 ($ne).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$procmux$875_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$procmux$874_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell top.$flatten\vga.$procmux$873_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell top.$flatten\vga.$procmux$872_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell top.$flatten\vga.$procmux$871_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell top.$flatten\vga.$procmux$870_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell top.$flatten\vga.$procmux$869_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$868_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$867_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$866_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$865_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$864_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$863_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$862_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell top.$flatten\vga.$procmux$861_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$860_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$859_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$858_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$857_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$856_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$855_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$854_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$853_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$852_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$851_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$850_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$849_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$848_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$847_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$846_CMP0 ($eq).
Removed top 27 bits (of 32) from port B of cell top.$flatten\vga.$procmux$845_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$844_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$843_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$842_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$841_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$840_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$839_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$838_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$837_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$836_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$835_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$834_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$833_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$832_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$831_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$830_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$829_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$828_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$827_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$826_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$825_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$824_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$823_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$822_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$821_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$820_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$819_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$818_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$817_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$816_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$815_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$814_CMP0 ($eq).
Removed top 26 bits (of 32) from port B of cell top.$flatten\vga.$procmux$813_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$812_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$811_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$810_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$809_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$808_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$807_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$806_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$805_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$804_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$803_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$802_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$801_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$800_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$799_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$798_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$797_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$796_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$795_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$794_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$793_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$792_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$791_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$790_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$789_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$788_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$787_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$786_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$785_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$784_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$783_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$782_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$781_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$780_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$779_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$778_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$777_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$776_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$775_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$774_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$773_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$772_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$771_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$770_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$769_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$768_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$767_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$766_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$765_CMP0 ($eq).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$procmux$764_CMP0 ($eq).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:572$637 ($lt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:572$636 ($gt).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:569$634 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:568$633 ($add).
Removed top 17 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:568$633 ($add).
Removed top 23 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:567$632 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$ge$vga.v:566$631 ($ge).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:552$628 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:548$626 ($lt).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:544$624 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\vga.$add$vga.v:543$623 ($add).
Removed top 22 bits (of 32) from port Y of cell top.$flatten\vga.$add$vga.v:543$623 ($add).
Removed top 22 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:541$622 ($lt).
Removed top 24 bits (of 32) from port A of cell top.$flatten\vga.$sub$vga.v:358$397 ($sub).
Removed top 21 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:358$397 ($sub).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$sub$vga.v:357$396 ($sub).
Removed top 16 bits (of 32) from port Y of cell top.$flatten\vga.$sub$vga.v:357$396 ($sub).
Removed top 24 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:356$394 ($lt).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:356$392 ($gt).
Removed top 24 bits (of 32) from port B of cell top.$flatten\vga.$lt$vga.v:356$390 ($lt).
Removed top 25 bits (of 32) from port B of cell top.$flatten\vga.$gt$vga.v:356$389 ($gt).
Removed top 22 bits (of 32) from wire top.$flatten\vga.$add$vga.v:543$623_Y.
Removed top 17 bits (of 32) from wire top.$flatten\vga.$add$vga.v:568$633_Y.
Removed top 22 bits (of 32) from wire top.$sub$top_icebreaker.v:61$383_Y.

3.15. Executing PEEPOPT pass (run peephole optimizers).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.17. Executing SHARE pass (SAT-based resource sharing).

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~348 debug messages>

3.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\vga.$add$vga.v:543$623 ($add).
  creating $macc model for $flatten\vga.$add$vga.v:568$633 ($add).
  creating $macc model for $flatten\vga.$sub$vga.v:357$396 ($sub).
  creating $macc model for $flatten\vga.$sub$vga.v:358$397 ($sub).
  creating $macc model for $sub$top_icebreaker.v:61$383 ($sub).
  creating $alu model for $macc $sub$top_icebreaker.v:61$383.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:358$397.
  creating $alu model for $macc $flatten\vga.$sub$vga.v:357$396.
  creating $alu model for $macc $flatten\vga.$add$vga.v:568$633.
  creating $alu model for $macc $flatten\vga.$add$vga.v:543$623.
  creating $alu model for $flatten\vga.$ge$vga.v:566$631 ($ge): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:356$389 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:356$392 ($gt): new $alu
  creating $alu model for $flatten\vga.$gt$vga.v:572$636 ($gt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:356$390 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:356$394 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:541$622 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:544$624 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:548$626 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:552$628 ($lt): merged with $flatten\vga.$ge$vga.v:566$631.
  creating $alu model for $flatten\vga.$lt$vga.v:567$632 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:569$634 ($lt): new $alu
  creating $alu model for $flatten\vga.$lt$vga.v:572$637 ($lt): new $alu
  creating $alu cell for $flatten\vga.$lt$vga.v:572$637: $auto$alumacc.cc:485:replace_alu$971
  creating $alu cell for $flatten\vga.$lt$vga.v:569$634: $auto$alumacc.cc:485:replace_alu$982
  creating $alu cell for $flatten\vga.$lt$vga.v:567$632: $auto$alumacc.cc:485:replace_alu$993
  creating $alu cell for $flatten\vga.$lt$vga.v:548$626: $auto$alumacc.cc:485:replace_alu$1004
  creating $alu cell for $flatten\vga.$lt$vga.v:544$624: $auto$alumacc.cc:485:replace_alu$1009
  creating $alu cell for $flatten\vga.$lt$vga.v:541$622: $auto$alumacc.cc:485:replace_alu$1014
  creating $alu cell for $flatten\vga.$lt$vga.v:356$394: $auto$alumacc.cc:485:replace_alu$1019
  creating $alu cell for $flatten\vga.$lt$vga.v:356$390: $auto$alumacc.cc:485:replace_alu$1030
  creating $alu cell for $flatten\vga.$gt$vga.v:572$636: $auto$alumacc.cc:485:replace_alu$1041
  creating $alu cell for $flatten\vga.$gt$vga.v:356$392: $auto$alumacc.cc:485:replace_alu$1046
  creating $alu cell for $flatten\vga.$gt$vga.v:356$389: $auto$alumacc.cc:485:replace_alu$1051
  creating $alu cell for $flatten\vga.$ge$vga.v:566$631, $flatten\vga.$lt$vga.v:552$628: $auto$alumacc.cc:485:replace_alu$1056
  creating $alu cell for $flatten\vga.$add$vga.v:543$623: $auto$alumacc.cc:485:replace_alu$1069
  creating $alu cell for $flatten\vga.$add$vga.v:568$633: $auto$alumacc.cc:485:replace_alu$1072
  creating $alu cell for $flatten\vga.$sub$vga.v:357$396: $auto$alumacc.cc:485:replace_alu$1075
  creating $alu cell for $flatten\vga.$sub$vga.v:358$397: $auto$alumacc.cc:485:replace_alu$1078
  creating $alu cell for $sub$top_icebreaker.v:61$383: $auto$alumacc.cc:485:replace_alu$1081
  created 17 $alu and 0 $macc cells.

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~13 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.6. Executing OPT_DFF pass (perform DFF optimizations).

3.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

3.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.9. Rerunning OPT passes. (Maybe there is more to do..)

3.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.13. Executing OPT_DFF pass (perform DFF optimizations).

3.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.22.16. Finished OPT passes. (There is nothing left to do.)

3.23. Executing MEMORY pass.

3.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

3.26. Executing TECHMAP pass (map to technology primitives).

3.26.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

3.26.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

3.26.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.27. Executing ICE40_BRAMINIT pass.

3.28. Executing OPT pass (performing simple optimizations).

3.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~125 debug messages>

3.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

3.28.3. Executing OPT_DFF pass (perform DFF optimizations).

3.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 9 unused cells and 35 unused wires.
<suppressed ~10 debug messages>

3.28.5. Finished fast OPT passes.

3.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.30.6. Executing OPT_DFF pass (perform DFF optimizations).

3.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.30.9. Finished OPT passes. (There is nothing left to do.)

3.31. Executing ICE40_WRAPCARRY pass (wrap carries).

3.32. Executing TECHMAP pass (map to technology primitives).

3.32.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/techmap.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.32.2. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$33acca59acb78d0be1d2963f30b104550f2b2c75\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$3ea884b3fc54c26d33846837c3c8815dcf82fb58\_80_ice40_alu for cells of type $alu.
Using template $paramod$constmap:c0d67ad2c3e6dadea5b12759ed5d7275f960929f$paramod$78aa40c67f1367bb8a644646c46e728c24c6a554\_90_shift_shiftx for cells of type $shiftx.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'1
  Constant input on bit 3 of port A: 1'1
  Constant input on bit 4 of port A: 1'1
  Constant input on bit 5 of port A: 1'1
  Constant input on bit 6 of port A: 1'1
  Constant input on bit 7 of port A: 1'1
  Constant input on bit 8 of port A: 1'1
  Constant input on bit 9 of port A: 1'1
  Constant input on bit 10 of port A: 1'1
  Constant input on bit 11 of port A: 1'1
  Constant input on bit 12 of port A: 1'1
  Constant input on bit 13 of port A: 1'1
  Constant input on bit 14 of port A: 1'1
  Constant input on bit 15 of port A: 1'1
  Constant input on bit 16 of port A: 1'1
  Constant input on bit 17 of port A: 1'1
  Constant input on bit 18 of port A: 1'1
  Constant input on bit 19 of port A: 1'1
  Constant input on bit 20 of port A: 1'1
  Constant input on bit 21 of port A: 1'1
  Constant input on bit 22 of port A: 1'1
  Constant input on bit 23 of port A: 1'1
  Constant input on bit 24 of port A: 1'1
  Constant input on bit 25 of port A: 1'1
  Constant input on bit 26 of port A: 1'1
  Constant input on bit 27 of port A: 1'1
  Constant input on bit 28 of port A: 1'1
  Constant input on bit 29 of port A: 1'1
  Constant input on bit 30 of port A: 1'1
  Constant input on bit 31 of port A: 1'1
  Constant input on bit 32 of port A: 1'1
  Constant input on bit 33 of port A: 1'1
  Constant input on bit 34 of port A: 1'1
  Constant input on bit 35 of port A: 1'1
  Constant input on bit 36 of port A: 1'1
  Constant input on bit 37 of port A: 1'1
  Constant input on bit 38 of port A: 1'1
  Constant input on bit 39 of port A: 1'1
  Constant input on bit 40 of port A: 1'1
  Constant input on bit 41 of port A: 1'1
  Constant input on bit 42 of port A: 1'1
  Constant input on bit 43 of port A: 1'1
  Constant input on bit 44 of port A: 1'1
  Constant input on bit 45 of port A: 1'1
  Constant input on bit 46 of port A: 1'1
  Constant input on bit 47 of port A: 1'1
  Constant input on bit 48 of port A: 1'1
  Constant input on bit 49 of port A: 1'1
  Constant input on bit 50 of port A: 1'1
  Constant input on bit 51 of port A: 1'1
  Constant input on bit 52 of port A: 1'1
  Constant input on bit 53 of port A: 1'1
  Constant input on bit 54 of port A: 1'1
  Constant input on bit 55 of port A: 1'1
  Constant input on bit 56 of port A: 1'1
  Constant input on bit 57 of port A: 1'1
  Constant input on bit 58 of port A: 1'1
  Bit 11 of port B and bit 10 of port B are connected.
  Bit 12 of port B and bit 10 of port B are connected.
  Bit 13 of port B and bit 10 of port B are connected.
  Bit 14 of port B and bit 10 of port B are connected.
  Bit 15 of port B and bit 10 of port B are connected.
  Bit 16 of port B and bit 10 of port B are connected.
  Bit 17 of port B and bit 10 of port B are connected.
  Bit 18 of port B and bit 10 of port B are connected.
  Bit 19 of port B and bit 10 of port B are connected.
  Bit 20 of port B and bit 10 of port B are connected.
  Bit 21 of port B and bit 10 of port B are connected.
  Bit 22 of port B and bit 10 of port B are connected.
  Bit 23 of port B and bit 10 of port B are connected.
  Bit 24 of port B and bit 10 of port B are connected.
  Bit 25 of port B and bit 10 of port B are connected.
  Bit 26 of port B and bit 10 of port B are connected.
  Bit 27 of port B and bit 10 of port B are connected.
  Bit 28 of port B and bit 10 of port B are connected.
  Bit 29 of port B and bit 10 of port B are connected.
  Bit 30 of port B and bit 10 of port B are connected.
  Bit 31 of port B and bit 10 of port B are connected.
Creating constmapped module `$paramod$constmap:13473da3ffb809effc6f10c13f03bd7f48c09998$paramod$78aa40c67f1367bb8a644646c46e728c24c6a554\_90_shift_shiftx'.

3.32.13. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:13473da3ffb809effc6f10c13f03bd7f48c09998$paramod$78aa40c67f1367bb8a644646c46e728c24c6a554\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$6055.
    dead port 2/2 on $mux $procmux$6049.
    dead port 2/2 on $mux $procmux$6043.
    dead port 2/2 on $mux $procmux$6037.
    dead port 2/2 on $mux $procmux$6031.
    dead port 2/2 on $mux $procmux$6025.
    dead port 2/2 on $mux $procmux$6019.
Removed 7 multiplexer ports.
<suppressed ~599 debug messages>

3.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:13473da3ffb809effc6f10c13f03bd7f48c09998$paramod$78aa40c67f1367bb8a644646c46e728c24c6a554\_90_shift_shiftx.
<suppressed ~27 debug messages>
Removed 47 unused cells and 60 unused wires.
Using template $paramod$constmap:13473da3ffb809effc6f10c13f03bd7f48c09998$paramod$78aa40c67f1367bb8a644646c46e728c24c6a554\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$b305eac7d37b340b2185bd4e08260a7104721b32\_80_ice40_alu for cells of type $alu.
Using template $paramod$4f7462fd7944a40ab328577064922bdf555975a5\_80_ice40_alu for cells of type $alu.
Using template $paramod$7f77f11b1ca0ddf1f4681fc646029b1e88256001\_80_ice40_alu for cells of type $alu.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using template $paramod$3b7577489eb4433b1d5620cab7f3794743dee5ea\_80_ice40_alu for cells of type $alu.
Using template $paramod$150d098cb9cca1819459bc5073194c8c53d2862d\_80_ice40_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_80_ice40_alu for cells of type $alu.
Using template $paramod$c2329456e44d92cf6c81e6b9e31fcc0288d07542\_80_ice40_alu for cells of type $alu.
Using template $paramod$166c2f046e18ad409cad1950f1b9aa8ab6204319\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~389 debug messages>

3.33. Executing OPT pass (performing simple optimizations).

3.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2966 debug messages>

3.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9258 debug messages>
Removed a total of 3086 cells.

3.33.3. Executing OPT_DFF pass (perform DFF optimizations).

3.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1084 unused cells and 1162 unused wires.
<suppressed ~1085 debug messages>

3.33.5. Finished fast OPT passes.

3.34. Executing ICE40_OPT pass (performing simple optimizations).

3.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1004.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1009.slice[0].carry: CO=\vga.count_h [4]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1014.slice[0].carry: CO=\vga.count_h [7]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1019.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1019.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1030.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1030.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1041.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1041.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1046.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1019.BB [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1051.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1030.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1056.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1009.X [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1069.slice[0].carry: CO=\vga.count_h [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1072.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1075.slice[0].carry: CO=\vga.count_v [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1075.slice[15].carry: CO=$auto$alumacc.cc:485:replace_alu$1075.C [15]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1078.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1069.X [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1078.slice[10].carry: CO=$auto$alumacc.cc:485:replace_alu$1078.C [10]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1081.slice[0].carry: CO=\rst_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$971.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1041.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$982.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1041.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$993.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1041.BB [0]

3.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~22 debug messages>

3.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.34.4. Executing OPT_DFF pass (perform DFF optimizations).

3.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 9 unused cells and 12 unused wires.
<suppressed ~10 debug messages>

3.34.6. Rerunning OPT passes. (Removed registers in this run.)

3.34.7. Running ICE40 specific optimizations.

3.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.34.10. Executing OPT_DFF pass (perform DFF optimizations).

3.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.34.12. Finished OPT passes. (There is nothing left to do.)

3.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.36. Executing TECHMAP pass (map to technology primitives).

3.36.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.36.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
No more expansions possible.
<suppressed ~62 debug messages>

3.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1069.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1072.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1075.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1075.slice[15].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1078.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1081.slice[0].carry ($lut).

3.39. Executing ICE40_OPT pass (performing simple optimizations).

3.39.1. Running ICE40 specific optimizations.

3.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~95 debug messages>

3.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

3.39.4. Executing OPT_DFF pass (perform DFF optimizations).

3.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 259 unused wires.
<suppressed ~1 debug messages>

3.39.6. Rerunning OPT passes. (Removed registers in this run.)

3.39.7. Running ICE40 specific optimizations.

3.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

3.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.39.10. Executing OPT_DFF pass (perform DFF optimizations).

3.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.39.12. Finished OPT passes. (There is nothing left to do.)

3.40. Executing TECHMAP pass (map to technology primitives).

3.40.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.41. Executing ABC pass (technology mapping using ABC).

3.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 741 gates and 847 wires to a netlist network with 105 inputs and 84 outputs.

3.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      93.
ABC: Participating nodes from both networks       =     187.
ABC: Participating nodes from the first network   =      92. (  73.60 % of nodes)
ABC: Participating nodes from the second network  =      95. (  76.00 % of nodes)
ABC: Node pairs (any polarity)                    =      92. (  73.60 % of names can be moved)
ABC: Node pairs (same polarity)                   =      90. (  72.00 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      124
ABC RESULTS:        internal signals:      658
ABC RESULTS:           input signals:      105
ABC RESULTS:          output signals:       84
Removing temp directory.

3.42. Executing ICE40_WRAPCARRY pass (wrap carries).

3.43. Executing TECHMAP pass (map to technology primitives).

3.43.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

3.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 119 unused cells and 634 unused wires.

3.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      175
  1-LUT               48
  2-LUT               36
  3-LUT               61
  4-LUT               30
  with \SB_CARRY    (#0)   47
  with \SB_CARRY    (#1)   51

Eliminating LUTs.
Number of LUTs:      175
  1-LUT               48
  2-LUT               36
  3-LUT               61
  4-LUT               30
  with \SB_CARRY    (#0)   47
  with \SB_CARRY    (#1)   51

Combining LUTs.
Number of LUTs:      142
  1-LUT               38
  2-LUT               11
  3-LUT               42
  4-LUT               51
  with \SB_CARRY    (#0)   47
  with \SB_CARRY    (#1)   51

Eliminated 0 LUTs.
Combined 33 LUTs.
<suppressed ~1229 debug messages>

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: /home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/tom/bin/oss-cad-suite/lib/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$0a14d5e896aa3d4771d458c7bcc847abb47d8244\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$71d951b20e73043168c1656217d126e617052faa\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod$cc08dba3aac8677e797984bdf18a09dd37547dd3\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod$a59507d273cd827eb6c46c37820d50a1b717efdf\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod$8c24dc0cdd336b7fb88bbf7eed45cec5cbae862b\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~548 debug messages>
Removed 0 unused cells and 308 unused wires.

3.46. Executing AUTONAME pass.
Renamed 3889 objects in module top (35 iterations).
<suppressed ~447 debug messages>

3.47. Executing HIERARCHY pass (managing design hierarchy).

3.47.1. Analyzing design hierarchy..
Top module:  \top

3.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.48. Printing statistics.

=== top ===

   Number of wires:                158
   Number of wire bits:            617
   Number of public wires:         158
   Number of public wire bits:     617
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                337
     SB_CARRY                      154
     SB_DFF                          1
     SB_DFFE                        10
     SB_DFFESR                       1
     SB_DFFESS                      17
     SB_DFFSR                        1
     SB_DFFSS                       10
     SB_LUT4                       142
     SB_PLL40_PAD                    1

3.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3.50. Executing JSON backend.

End of script. Logfile hash: 581500efb7, CPU: user 1.12s system 0.02s, MEM: 42.69 MB peak
Yosys 0.27+22 (git sha1 53c0a6b78, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 25% 15x read_verilog (0 sec), 19% 25x opt_expr (0 sec), ...
